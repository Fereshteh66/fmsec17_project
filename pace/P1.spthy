theory P1
begin

// not sure if we need this
builtins: asymmetric-encryption, symmetric-encryption

/*
	We want to formalize the following protocol
	protocol {
		1. A -> B: {'1', x}
		2. B -> A: {'2', x}k(A,B)
	}
*/

/*
	TODO: Find out how to construct a predefined shared key!
*/

// pre-shared key distribution
rule Register_pk:
  [ Fr(~ltkA) ]
  --[ Register($A) ]->
  [ !Ltk($A, ~ltkA), Out(pk(~ltkA)) ] 

rule Reveal_ltk:
  [ !Ltk(A, ltkA) ] --[ Reveal(A) ]-> [ Out(ltkA) ]


rule setup:
  [ Fr(~kAB) ]
--[]->
  [ St_A_0($A, ~kAB), St_B_0($B, ~kAB) ]


// Initialize A
rule Init_A:
  [ St_A_0($A, ~kAB), Fr(~id) ]
--[ Create_A($A, ~id) ]->
  [ St_A_1($A, ~id, ~kAB, $B) ]

// Initialize B
rule Init_B:
  [ St_B_0($B, ~kAB), Fr(~id) ]
--[ Create_B($B, ~id) ]->
  [ St_B_1($B, ~id, ~kAB, $A) ]

// 1. A send
rule A_1_send:
  [ St_A_1($A, ~id, ~kAB, $B), Fr(~x) ]
--[ Send('1', $A, ~x) ]->
  [ St_A_2($A, ~id, ~kAB, ~x, $B), Out(~x) ]

// 1. B receive
rule B_1_receive:
  [ St_B_1($B, ~id, ~kAB, $A), In(x) ]
--[ Recv('1', $B, x) ]->
  [ St_B_2($B, ~id, ~kAB, x, $A) ]


// 2. B send
rule B_2_send:
  [ St_B_2($B, ~id, ~kAB, x, $A) ]
--[ Send('2', $B, mac) ]->
  [ St_B_3($B, ~id, ~kAB, x, $A), Out(senc(x, ~kAB)) ]

// 2. A receive
rule A_2_receive:
  [ St_A_2($A, ~id, ~kAB, x, $B), In(senc(x, ~kAB)) ]
--[ Recv('2', $A, mac) ]->
  [ St_A_3($A, ~id, ~kAB, x, $B) ]


/**
	Lemmas
**/

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
	
lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma secrecy_PFS:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"

lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & j < i
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end