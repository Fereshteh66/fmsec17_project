theory P1
begin

builtins: symmetric-encryption
functions: mac/2

/*
	We want to formalize the following protocol
	protocol {
		1. A -> B: {'1', x}
		2. B -> A: {'2', x}_k(A,B)  (as a MAC)
	}
*/


// Setup a shared key with two parties
rule SetupKey:
  [ Fr(~kAB) ]
--[ NotEq($A, $B) ]->
  [ !SharedKey($A, $B, ~kAB) ]


rule Reveal:
  [ !SharedKey(A, B, kAB) ]
--[ Reveal(A), Reveal(B) ]->
  [ Out(kAB) ]


// Initialize Initiator
rule Init_I:
  [ Fr(~id) , !SharedKey(A, B, kAB) ]
--[ Create_I(B, ~id) ]->
  [ St_I_1(A, ~id, kAB, B) ]

// Initialize Responder
rule Init_R:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_R(B, ~id) ]->
  [ St_R_1(B, ~id, kAB, A) ]

// 1. Initiator send
rule I_1_send:
  [ St_I_1(A, ~id, kAB, B), Fr(~x) ]
--[ Send(A, <'1', ~x>) ]->
  [ St_I_2(A, ~id, kAB, ~x, B), Out(<'1', ~x>) ]

// 1. Responder receive
rule R_1_receive:
  [ St_R_1(B, ~id, kAB, A), In(<'1', x>) ]
--[ Recv(B, <'1', x>), Running(B, A, <'I', 'R', x>) ]->
  [ St_R_2(B, ~id, kAB, x, A) ]


// 2. Responder send
rule R_2_send:
  let macB2 = mac(x, kAB)
  in
  [ St_R_2(B, ~id, kAB, x, A) ]
--[ Send(B, <'2', macB2>) ]->
  [ St_R_3(B, ~id, kAB, x, A), Out(<'2', macB2>) ]

// 2. Initiator receive
rule I_2_receive:
  let macA2 = mac(x, kAB)
  in
  [ St_I_2(A, ~id, kAB, x, B), In(<'2', macA2>) ]
--[ Recv(A, <'2', macA2>), Commit(A, B, <'I', 'R', x>), Honest(A), Finish() ]->
  [ St_I_3(A, ~id, kAB, x, B) ]


/**
	Lemmas
**/

lemma executable:
  exists-trace
    "Ex #i. Finish() @i & not (Ex A #j. Reveal(A)@j)"

lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


/**
	Restrictions
**/
restriction noselfcommunication:
  " All X Y #i. NotEq(X,Y) @i ==> not (X = Y)"

end