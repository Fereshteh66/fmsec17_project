theory P5ab begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, mac/2, map/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) SharedKeySetup:
   [ Fr( ~shk ) ]
  --[ KeySetup( $A, $B ), NotEq( $A, $B ) ]->
   [ !SharedKey( $A, $B, ~shk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !SharedKey( A, B, kAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( kAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_I( A, ~id ) ]->
   [ St_I_1( A, ~id, kAB, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_R( B, ~id ) ]->
   [ St_R_1( B, ~id, kAB, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1_send:
   [ St_I_1( A, ~id, kAB, B ), Fr( ~s ), Fr( ~x ) ]
  --[ Send( A, <'1', 'p', map(~s, 'p')^~x, senc(~s, h(kAB))> ) ]->
   [
   St_I_2( A, ~id, kAB, ~s, ~x, 'p', B ),
   Out( <'1', 'p', map(~s, 'p')^~x, senc(~s, h(kAB))> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1_receive:
   [ St_R_1( B, ~id, kAB, A ), In( <'1', 'p', X, senc(s, h(kAB))> ) ]
  --[ Recv( B, <'1', 'p', X, senc(s, h(kAB))> ) ]->
   [ St_R_2( B, ~id, kAB, s, X, 'p', A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2_send:
   [ St_R_2( B, ~id, kAB, s, X, 'p', A ), Fr( ~y ) ]
  --[ Send( B, <'2', map(s, 'p')^~y> ) ]->
   [
   St_R_3( B, ~id, kAB, s, X, ~y, 'p', A ),
   Out( <'2', map(s, 'p')^~y> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2_receive:
   [ St_I_2( A, ~id, kAB, s, x, 'p', B ), In( <'2', Y> ) ]
  --[ Recv( A, <'2', Y> ) ]->
   [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3_send:
   [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]
  --[
  Send( A, mac(<'3', Y>, h(Y^x)) ),
  Running( A, B, <'R', 'I', map(s, 'p')^x, Y, h(Y^x)> )
  ]->
   [
   St_I_4( A, ~id, kAB, s, x, Y, 'p', B ),
   Out( mac(<'3', Y>, h(Y^x)) )
   ]

  /*
  rule (modulo AC) I_3_send:
     [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]
    --[
    Send( A, mac(<'3', Y>, h(z)) ),
    Running( A, B, <'R', 'I', z.1, Y, h(z)> )
    ]->
     [
     St_I_4( A, ~id, kAB, s, x, Y, 'p', B ), Out( mac(<'3', Y>, h(z)) )
     ]
    variants (modulo AC)
     1. Y     = Y.17
        s     = s.19
        x     = one
        z     = Y.17
        z.1   = map(s.19, 'p')
    
     2. Y     = Y.18
        s     = s.20
        x     = x.21
        z     = Y.18^x.21
        z.1   = map(s.20, 'p')^x.21
    
     3. Y     = z.23^inv(x.20)
        s     = s.19
        x     = x.20
        z     = z.23
        z.1   = map(s.19, 'p')^x.20
    
     4. Y     = z.44^x.73
        s     = s.40
        x     = inv(x.73)
        z     = z.44
        z.1   = map(s.40, 'p')^inv(x.73)
    
     5. Y     = z.45^(x.74*inv(x.75))
        s     = s.41
        x     = (x.75*inv(x.74))
        z     = z.45
        z.1   = map(s.41, 'p')^(x.75*inv(x.74))
    
     6. Y     = x.72^x.73
        s     = s.40
        x     = x.41
        z     = x.72^(x.41*x.73)
        z.1   = map(s.40, 'p')^x.41
    
     7. Y     = x.73^x.74
        s     = s.41
        x     = inv((x.74*x.75))
        z     = x.73^inv(x.75)
        z.1   = map(s.41, 'p')^inv((x.74*x.75))
    
     8. Y     = x.73^x.74
        s     = s.41
        x     = (x.75*inv(x.74))
        z     = x.73^x.75
        z.1   = map(s.41, 'p')^(x.75*inv(x.74))
    
     9. Y     = x.73^inv(x.74)
        s     = s.41
        x     = (x.74*x.75)
        z     = x.73^x.75
        z.1   = map(s.41, 'p')^(x.74*x.75)
    
    10. Y     = x.73^inv(x.75)
        s     = s.41
        x     = inv(x.74)
        z     = x.73^inv((x.74*x.75))
        z.1   = map(s.41, 'p')^inv(x.74)
    
    11. Y     = x.73^inv((x.42*x.75))
        s     = s.41
        x     = x.42
        z     = x.73^inv(x.75)
        z.1   = map(s.41, 'p')^x.42
    
    12. Y     = x.73^(x.74*x.75)
        s     = s.41
        x     = inv(x.74)
        z     = x.73^x.75
        z.1   = map(s.41, 'p')^inv(x.74)
    
    13. Y     = x.73^(x.75*inv(x.42))
        s     = s.41
        x     = x.42
        z     = x.73^x.75
        z.1   = map(s.41, 'p')^x.42
    
    14. Y     = x.74^x.75
        s     = s.42
        x     = (x.77*inv((x.75*x.76)))
        z     = x.74^(x.77*inv(x.76))
        z.1   = map(s.42, 'p')^(x.77*inv((x.75*x.76)))
    
    15. Y     = x.74^inv(x.75)
        s     = s.42
        x     = (x.77*inv(x.76))
        z     = x.74^(x.77*inv((x.75*x.76)))
        z.1   = map(s.42, 'p')^(x.77*inv(x.76))
    
    16. Y     = x.74^inv((x.75*x.76))
        s     = s.42
        x     = (x.76*x.77)
        z     = x.74^(x.77*inv(x.75))
        z.1   = map(s.42, 'p')^(x.76*x.77)
    
    17. Y     = x.74^inv((x.76*x.77))
        s     = s.42
        x     = (x.77*inv(x.75))
        z     = x.74^inv((x.75*x.76))
        z.1   = map(s.42, 'p')^(x.77*inv(x.75))
    
    18. Y     = x.74^(x.75*x.77)
        s     = s.42
        x     = (x.76*inv(x.75))
        z     = x.74^(x.76*x.77)
        z.1   = map(s.42, 'p')^(x.76*inv(x.75))
    
    19. Y     = x.74^(x.75*x.77*inv(x.76))
        s     = s.42
        x     = (x.76*inv(x.75))
        z     = x.74^x.77
        z.1   = map(s.42, 'p')^(x.76*inv(x.75))
    
    20. Y     = x.74^(x.75*inv(x.76))
        s     = s.42
        x     = (x.76*x.77*inv(x.75))
        z     = x.74^x.77
        z.1   = map(s.42, 'p')^(x.76*x.77*inv(x.75))
    
    21. Y     = x.74^(x.75*inv((x.76*x.77)))
        s     = s.42
        x     = (x.77*inv(x.75))
        z     = x.74^inv(x.76)
        z.1   = map(s.42, 'p')^(x.77*inv(x.75))
    
    22. Y     = x.74^(x.76*x.77)
        s     = s.42
        x     = inv((x.75*x.76))
        z     = x.74^(x.77*inv(x.75))
        z.1   = map(s.42, 'p')^inv((x.75*x.76))
    
    23. Y     = x.74^(x.77*inv(x.75))
        s     = s.42
        x     = inv((x.76*x.77))
        z     = x.74^inv((x.75*x.76))
        z.1   = map(s.42, 'p')^inv((x.76*x.77))
    
    24. Y     = x.74^(x.77*inv(x.75))
        s     = s.42
        x     = (x.75*x.76)
        z     = x.74^(x.76*x.77)
        z.1   = map(s.42, 'p')^(x.75*x.76)
    
    25. Y     = x.74^(x.77*inv(x.75))
        s     = s.42
        x     = (x.75*inv((x.76*x.77)))
        z     = x.74^inv(x.76)
        z.1   = map(s.42, 'p')^(x.75*inv((x.76*x.77)))
    
    26. Y     = x.74^(x.77*inv(x.76))
        s     = s.42
        x     = inv(x.75)
        z     = x.74^(x.77*inv((x.75*x.76)))
        z.1   = map(s.42, 'p')^inv(x.75)
    
    27. Y     = x.74^(x.77*inv((x.43*x.76)))
        s     = s.42
        x     = x.43
        z     = x.74^(x.77*inv(x.76))
        z.1   = map(s.42, 'p')^x.43
    
    28. Y     = x.75^inv((x.77*x.78))
        s     = s.43
        x     = (x.78*x.79*inv(x.76))
        z     = x.75^(x.79*inv((x.76*x.77)))
        z.1   = map(s.43, 'p')^(x.78*x.79*inv(x.76))
    
    29. Y     = x.75^(x.76*x.79*inv(x.77))
        s     = s.43
        x     = (x.77*x.78*inv(x.76))
        z     = x.75^(x.78*x.79)
        z.1   = map(s.43, 'p')^(x.77*x.78*inv(x.76))
    
    30. Y     = x.75^(x.76*x.79*inv((x.77*x.78)))
        s     = s.43
        x     = (x.78*inv(x.76))
        z     = x.75^(x.79*inv(x.77))
        z.1   = map(s.43, 'p')^(x.78*inv(x.76))
    
    31. Y     = x.75^(x.76*inv((x.77*x.78)))
        s     = s.43
        x     = (x.78*x.79*inv(x.76))
        z     = x.75^(x.79*inv(x.77))
        z.1   = map(s.43, 'p')^(x.78*x.79*inv(x.76))
    
    32. Y     = x.75^(x.77*x.79)
        s     = s.43
        x     = (x.78*inv((x.76*x.77)))
        z     = x.75^(x.78*x.79*inv(x.76))
        z.1   = map(s.43, 'p')^(x.78*inv((x.76*x.77)))
    
    33. Y     = x.75^(x.77*inv((x.78*x.79)))
        s     = s.43
        x     = (x.79*inv((x.76*x.77)))
        z     = x.75^inv((x.76*x.78))
        z.1   = map(s.43, 'p')^(x.79*inv((x.76*x.77)))
    
    34. Y     = x.75^(x.78*x.79*inv(x.76))
        s     = s.43
        x     = inv((x.77*x.78))
        z     = x.75^(x.79*inv((x.76*x.77)))
        z.1   = map(s.43, 'p')^inv((x.77*x.78))
    
    35. Y     = x.75^(x.78*x.79*inv(x.76))
        s     = s.43
        x     = (x.76*inv((x.77*x.78)))
        z     = x.75^(x.79*inv(x.77))
        z.1   = map(s.43, 'p')^(x.76*inv((x.77*x.78)))
    
    36. Y     = x.75^(x.78*inv(x.76))
        s     = s.43
        x     = (x.76*x.79*inv((x.77*x.78)))
        z     = x.75^(x.79*inv(x.77))
        z.1   = map(s.43, 'p')^(x.76*x.79*inv((x.77*x.78)))
    
    37. Y     = x.75^(x.78*inv(x.76))
        s     = s.43
        x     = (x.79*inv((x.77*x.78)))
        z     = x.75^(x.79*inv((x.76*x.77)))
        z.1   = map(s.43, 'p')^(x.79*inv((x.77*x.78)))
    
    38. Y     = x.75^(x.79*inv(x.77))
        s     = s.43
        x     = (x.78*inv(x.76))
        z     = x.75^(x.78*x.79*inv((x.76*x.77)))
        z.1   = map(s.43, 'p')^(x.78*inv(x.76))
    
    39. Y     = x.75^(x.79*inv((x.76*x.77)))
        s     = s.43
        x     = (x.77*x.78)
        z     = x.75^(x.78*x.79*inv(x.76))
        z.1   = map(s.43, 'p')^(x.77*x.78)
    
    40. Y     = x.75^(x.79*inv((x.77*x.78)))
        s     = s.43
        x     = (x.78*inv(x.76))
        z     = x.75^(x.79*inv((x.76*x.77)))
        z.1   = map(s.43, 'p')^(x.78*inv(x.76))
    
    41. Y     = x.76^(x.77*x.81*inv((x.78*x.79)))
        s     = s.44
        x     = (x.79*x.80*inv(x.77))
        z     = x.76^(x.80*x.81*inv(x.78))
        z.1   = map(s.44, 'p')^(x.79*x.80*inv(x.77))
    
    42. Y     = x.76^(x.78*x.81*inv((x.79*x.80)))
        s     = s.44
        x     = (x.80*inv((x.77*x.78)))
        z     = x.76^(x.81*inv((x.77*x.79)))
        z.1   = map(s.44, 'p')^(x.80*inv((x.77*x.78)))
    
    43. Y     = x.76^(x.78*inv((x.79*x.80)))
        s     = s.44
        x     = (x.80*x.81*inv((x.77*x.78)))
        z     = x.76^(x.81*inv((x.77*x.79)))
        z.1   = map(s.44, 'p')^(x.80*x.81*inv((x.77*x.78)))
    
    44. Y     = x.76^(x.79*x.81*inv(x.77))
        s     = s.44
        x     = (x.77*x.80*inv((x.78*x.79)))
        z     = x.76^(x.80*x.81*inv(x.78))
        z.1   = map(s.44, 'p')^(x.77*x.80*inv((x.78*x.79)))
    
    45. Y     = x.76^(x.79*x.81*inv(x.77))
        s     = s.44
        x     = (x.80*inv((x.78*x.79)))
        z     = x.76^(x.80*x.81*inv((x.77*x.78)))
        z.1   = map(s.44, 'p')^(x.80*inv((x.78*x.79)))
    
    46. Y     = x.76^(x.81*inv((x.78*x.79)))
        s     = s.44
        x     = (x.79*x.80*inv(x.77))
        z     = x.76^(x.80*x.81*inv((x.77*x.78)))
        z.1   = map(s.44, 'p')^(x.79*x.80*inv(x.77))
    
    47. Y     = x.77^(x.79*x.83*inv((x.80*x.81)))
        s     = s.45
        x     = (x.81*x.82*inv((x.78*x.79)))
        z     = x.77^(x.82*x.83*inv((x.78*x.80)))
        z.1   = map(s.45, 'p')^(x.81*x.82*inv((x.78*x.79)))
  */

rule (modulo E) R_3_receive:
   [
   St_R_3( B, ~id, kAB, s, X, y, 'p', A ),
   In( mac(<'3', map(s, 'p')^y>, h(X^y)) )
   ]
  --[
  Recv( B, mac(<'3', map(s, 'p')^y>, h(X^y)) ),
  Running( B, A, <'I', 'R', X, map(s, 'p')^y, h(X^y)> ),
  Commit( B, A, <'R', 'I', X, map(s, 'p')^y, h(X^y)> ), Honest( A ),
  Honest( B ), Secret( B, h(X^y) )
  ]->
   [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]

  /*
  rule (modulo AC) R_3_receive:
     [
     St_R_3( B, ~id, kAB, s, X, y, 'p', A ), In( mac(<'3', z>, h(z.1)) )
     ]
    --[
    Recv( B, mac(<'3', z>, h(z.1)) ),
    Running( B, A, <'I', 'R', X, z, h(z.1)> ),
    Commit( B, A, <'R', 'I', X, z, h(z.1)> ), Honest( A ), Honest( B ),
    Secret( B, h(z.1) )
    ]->
     [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
    variants (modulo AC)
     1. X     = X.15
        s     = s.17
        y     = one
        z     = map(s.17, 'p')
        z.1   = X.15
    
     2. X     = X.16
        s     = s.18
        y     = y.19
        z     = map(s.18, 'p')^y.19
        z.1   = X.16^y.19
    
     3. X     = z.23^inv(y.19)
        s     = s.18
        y     = y.19
        z     = map(s.18, 'p')^y.19
        z.1   = z.23
    
     4. X     = z.43^x.69
        s     = s.38
        y     = inv(x.69)
        z     = map(s.38, 'p')^inv(x.69)
        z.1   = z.43
    
     5. X     = z.44^(x.70*inv(x.71))
        s     = s.39
        y     = (x.71*inv(x.70))
        z     = map(s.39, 'p')^(x.71*inv(x.70))
        z.1   = z.44
    
     6. X     = x.68^x.69
        s     = s.38
        y     = y.39
        z     = map(s.38, 'p')^y.39
        z.1   = x.68^(y.39*x.69)
    
     7. X     = x.69^x.70
        s     = s.39
        y     = inv((x.70*x.71))
        z     = map(s.39, 'p')^inv((x.70*x.71))
        z.1   = x.69^inv(x.71)
    
     8. X     = x.69^x.70
        s     = s.39
        y     = (x.71*inv(x.70))
        z     = map(s.39, 'p')^(x.71*inv(x.70))
        z.1   = x.69^x.71
    
     9. X     = x.69^inv(x.70)
        s     = s.39
        y     = (x.70*x.71)
        z     = map(s.39, 'p')^(x.70*x.71)
        z.1   = x.69^x.71
    
    10. X     = x.69^inv(x.71)
        s     = s.39
        y     = inv(x.70)
        z     = map(s.39, 'p')^inv(x.70)
        z.1   = x.69^inv((x.70*x.71))
    
    11. X     = x.69^inv((y.40*x.71))
        s     = s.39
        y     = y.40
        z     = map(s.39, 'p')^y.40
        z.1   = x.69^inv(x.71)
    
    12. X     = x.69^(x.70*x.71)
        s     = s.39
        y     = inv(x.70)
        z     = map(s.39, 'p')^inv(x.70)
        z.1   = x.69^x.71
    
    13. X     = x.69^(x.71*inv(y.40))
        s     = s.39
        y     = y.40
        z     = map(s.39, 'p')^y.40
        z.1   = x.69^x.71
    
    14. X     = x.70^x.71
        s     = s.40
        y     = (x.73*inv((x.71*x.72)))
        z     = map(s.40, 'p')^(x.73*inv((x.71*x.72)))
        z.1   = x.70^(x.73*inv(x.72))
    
    15. X     = x.70^inv(x.71)
        s     = s.40
        y     = (x.73*inv(x.72))
        z     = map(s.40, 'p')^(x.73*inv(x.72))
        z.1   = x.70^(x.73*inv((x.71*x.72)))
    
    16. X     = x.70^inv((x.71*x.72))
        s     = s.40
        y     = (x.72*x.73)
        z     = map(s.40, 'p')^(x.72*x.73)
        z.1   = x.70^(x.73*inv(x.71))
    
    17. X     = x.70^inv((x.72*x.73))
        s     = s.40
        y     = (x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.73*inv(x.71))
        z.1   = x.70^inv((x.71*x.72))
    
    18. X     = x.70^(x.71*x.73)
        s     = s.40
        y     = (x.72*inv(x.71))
        z     = map(s.40, 'p')^(x.72*inv(x.71))
        z.1   = x.70^(x.72*x.73)
    
    19. X     = x.70^(x.71*x.73*inv(x.72))
        s     = s.40
        y     = (x.72*inv(x.71))
        z     = map(s.40, 'p')^(x.72*inv(x.71))
        z.1   = x.70^x.73
    
    20. X     = x.70^(x.71*inv(x.72))
        s     = s.40
        y     = (x.72*x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.72*x.73*inv(x.71))
        z.1   = x.70^x.73
    
    21. X     = x.70^(x.71*inv((x.72*x.73)))
        s     = s.40
        y     = (x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.73*inv(x.71))
        z.1   = x.70^inv(x.72)
    
    22. X     = x.70^(x.72*x.73)
        s     = s.40
        y     = inv((x.71*x.72))
        z     = map(s.40, 'p')^inv((x.71*x.72))
        z.1   = x.70^(x.73*inv(x.71))
    
    23. X     = x.70^(x.73*inv(x.71))
        s     = s.40
        y     = inv((x.72*x.73))
        z     = map(s.40, 'p')^inv((x.72*x.73))
        z.1   = x.70^inv((x.71*x.72))
    
    24. X     = x.70^(x.73*inv(x.71))
        s     = s.40
        y     = (x.71*x.72)
        z     = map(s.40, 'p')^(x.71*x.72)
        z.1   = x.70^(x.72*x.73)
    
    25. X     = x.70^(x.73*inv(x.71))
        s     = s.40
        y     = (x.71*inv((x.72*x.73)))
        z     = map(s.40, 'p')^(x.71*inv((x.72*x.73)))
        z.1   = x.70^inv(x.72)
    
    26. X     = x.70^(x.73*inv(x.72))
        s     = s.40
        y     = inv(x.71)
        z     = map(s.40, 'p')^inv(x.71)
        z.1   = x.70^(x.73*inv((x.71*x.72)))
    
    27. X     = x.70^(x.73*inv((y.41*x.72)))
        s     = s.40
        y     = y.41
        z     = map(s.40, 'p')^y.41
        z.1   = x.70^(x.73*inv(x.72))
    
    28. X     = x.71^inv((x.73*x.74))
        s     = s.41
        y     = (x.74*x.75*inv(x.72))
        z     = map(s.41, 'p')^(x.74*x.75*inv(x.72))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    29. X     = x.71^(x.72*x.75*inv(x.73))
        s     = s.41
        y     = (x.73*x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.73*x.74*inv(x.72))
        z.1   = x.71^(x.74*x.75)
    
    30. X     = x.71^(x.72*x.75*inv((x.73*x.74)))
        s     = s.41
        y     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.75*inv(x.73))
    
    31. X     = x.71^(x.72*inv((x.73*x.74)))
        s     = s.41
        y     = (x.74*x.75*inv(x.72))
        z     = map(s.41, 'p')^(x.74*x.75*inv(x.72))
        z.1   = x.71^(x.75*inv(x.73))
    
    32. X     = x.71^(x.73*x.75)
        s     = s.41
        y     = (x.74*inv((x.72*x.73)))
        z     = map(s.41, 'p')^(x.74*inv((x.72*x.73)))
        z.1   = x.71^(x.74*x.75*inv(x.72))
    
    33. X     = x.71^(x.73*inv((x.74*x.75)))
        s     = s.41
        y     = (x.75*inv((x.72*x.73)))
        z     = map(s.41, 'p')^(x.75*inv((x.72*x.73)))
        z.1   = x.71^inv((x.72*x.74))
    
    34. X     = x.71^(x.74*x.75*inv(x.72))
        s     = s.41
        y     = inv((x.73*x.74))
        z     = map(s.41, 'p')^inv((x.73*x.74))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    35. X     = x.71^(x.74*x.75*inv(x.72))
        s     = s.41
        y     = (x.72*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.72*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv(x.73))
    
    36. X     = x.71^(x.74*inv(x.72))
        s     = s.41
        y     = (x.72*x.75*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.72*x.75*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv(x.73))
    
    37. X     = x.71^(x.74*inv(x.72))
        s     = s.41
        y     = (x.75*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.75*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    38. X     = x.71^(x.75*inv(x.73))
        s     = s.41
        y     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.74*x.75*inv((x.72*x.73)))
    
    39. X     = x.71^(x.75*inv((x.72*x.73)))
        s     = s.41
        y     = (x.73*x.74)
        z     = map(s.41, 'p')^(x.73*x.74)
        z.1   = x.71^(x.74*x.75*inv(x.72))
    
    40. X     = x.71^(x.75*inv((x.73*x.74)))
        s     = s.41
        y     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    41. X     = x.72^(x.73*x.77*inv((x.74*x.75)))
        s     = s.42
        y     = (x.75*x.76*inv(x.73))
        z     = map(s.42, 'p')^(x.75*x.76*inv(x.73))
        z.1   = x.72^(x.76*x.77*inv(x.74))
    
    42. X     = x.72^(x.74*x.77*inv((x.75*x.76)))
        s     = s.42
        y     = (x.76*inv((x.73*x.74)))
        z     = map(s.42, 'p')^(x.76*inv((x.73*x.74)))
        z.1   = x.72^(x.77*inv((x.73*x.75)))
    
    43. X     = x.72^(x.74*inv((x.75*x.76)))
        s     = s.42
        y     = (x.76*x.77*inv((x.73*x.74)))
        z     = map(s.42, 'p')^(x.76*x.77*inv((x.73*x.74)))
        z.1   = x.72^(x.77*inv((x.73*x.75)))
    
    44. X     = x.72^(x.75*x.77*inv(x.73))
        s     = s.42
        y     = (x.73*x.76*inv((x.74*x.75)))
        z     = map(s.42, 'p')^(x.73*x.76*inv((x.74*x.75)))
        z.1   = x.72^(x.76*x.77*inv(x.74))
    
    45. X     = x.72^(x.75*x.77*inv(x.73))
        s     = s.42
        y     = (x.76*inv((x.74*x.75)))
        z     = map(s.42, 'p')^(x.76*inv((x.74*x.75)))
        z.1   = x.72^(x.76*x.77*inv((x.73*x.74)))
    
    46. X     = x.72^(x.77*inv((x.74*x.75)))
        s     = s.42
        y     = (x.75*x.76*inv(x.73))
        z     = map(s.42, 'p')^(x.75*x.76*inv(x.73))
        z.1   = x.72^(x.76*x.77*inv((x.73*x.74)))
    
    47. X     = x.73^(x.75*x.79*inv((x.76*x.77)))
        s     = s.43
        y     = (x.77*x.78*inv((x.74*x.75)))
        z     = map(s.43, 'p')^(x.77*x.78*inv((x.74*x.75)))
        z.1   = x.73^(x.78*x.79*inv((x.74*x.76)))
  */

rule (modulo E) R_4_send:
   [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
  --[ Send( B, mac(<'4', X>, h(X^y)) ) ]->
   [
   St_R_5( B, ~id, kAB, s, X, y, 'p', A ),
   Out( mac(<'4', X>, h(X^y)) )
   ]

  /*
  rule (modulo AC) R_4_send:
     [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
    --[ Send( B, mac(<'4', X>, h(z)) ) ]->
     [
     St_R_5( B, ~id, kAB, s, X, y, 'p', A ), Out( mac(<'4', X>, h(z)) )
     ]
    variants (modulo AC)
     1. X     = X.12
        y     = one
        z     = X.12
    
     2. X     = X.15
        y     = y.18
        z     = X.15^y.18
    
     3. X     = x.14^x.15
        y     = inv((x.15*x.16))
        z     = x.14^inv(x.16)
    
     4. X     = x.14^x.15
        y     = (x.16*inv(x.15))
        z     = x.14^x.16
    
     5. X     = x.14^inv(x.15)
        y     = (x.15*x.16)
        z     = x.14^x.16
    
     6. X     = x.14^inv(x.16)
        y     = inv(x.15)
        z     = x.14^inv((x.15*x.16))
    
     7. X     = x.14^(x.15*x.16)
        y     = inv(x.15)
        z     = x.14^x.16
    
     8. X     = z.14^x.17
        y     = inv(x.17)
        z     = z.14
    
     9. X     = x.15^x.16
        y     = (x.18*inv((x.16*x.17)))
        z     = x.15^(x.18*inv(x.17))
    
    10. X     = x.15^inv(x.16)
        y     = (x.18*inv(x.17))
        z     = x.15^(x.18*inv((x.16*x.17)))
    
    11. X     = x.15^inv((x.16*x.17))
        y     = (x.17*x.18)
        z     = x.15^(x.18*inv(x.16))
    
    12. X     = x.15^inv((x.17*x.18))
        y     = (x.18*inv(x.16))
        z     = x.15^inv((x.16*x.17))
    
    13. X     = x.15^(x.16*x.18)
        y     = (x.17*inv(x.16))
        z     = x.15^(x.17*x.18)
    
    14. X     = x.15^(x.16*x.18*inv(x.17))
        y     = (x.17*inv(x.16))
        z     = x.15^x.18
    
    15. X     = x.15^(x.16*inv(x.17))
        y     = (x.17*x.18*inv(x.16))
        z     = x.15^x.18
    
    16. X     = x.15^(x.16*inv((x.17*x.18)))
        y     = (x.18*inv(x.16))
        z     = x.15^inv(x.17)
    
    17. X     = x.15^(x.17*x.18)
        y     = inv((x.16*x.17))
        z     = x.15^(x.18*inv(x.16))
    
    18. X     = x.15^(x.18*inv(x.16))
        y     = inv((x.17*x.18))
        z     = x.15^inv((x.16*x.17))
    
    19. X     = x.15^(x.18*inv(x.16))
        y     = (x.16*x.17)
        z     = x.15^(x.17*x.18)
    
    20. X     = x.15^(x.18*inv(x.16))
        y     = (x.16*inv((x.17*x.18)))
        z     = x.15^inv(x.17)
    
    21. X     = x.15^(x.18*inv(x.17))
        y     = inv(x.16)
        z     = x.15^(x.18*inv((x.16*x.17)))
    
    22. X     = z.15^(x.18*inv(x.19))
        y     = (x.19*inv(x.18))
        z     = z.15
    
    23. X     = x.16^inv((x.18*x.19))
        y     = (x.19*x.20*inv(x.17))
        z     = x.16^(x.20*inv((x.17*x.18)))
    
    24. X     = x.16^(x.17*x.20*inv(x.18))
        y     = (x.18*x.19*inv(x.17))
        z     = x.16^(x.19*x.20)
    
    25. X     = x.16^(x.17*x.20*inv((x.18*x.19)))
        y     = (x.19*inv(x.17))
        z     = x.16^(x.20*inv(x.18))
    
    26. X     = x.16^(x.17*inv((x.18*x.19)))
        y     = (x.19*x.20*inv(x.17))
        z     = x.16^(x.20*inv(x.18))
    
    27. X     = x.16^(x.18*x.20)
        y     = (x.19*inv((x.17*x.18)))
        z     = x.16^(x.19*x.20*inv(x.17))
    
    28. X     = x.16^(x.18*inv((x.19*x.20)))
        y     = (x.20*inv((x.17*x.18)))
        z     = x.16^inv((x.17*x.19))
    
    29. X     = x.16^(x.19*x.20*inv(x.17))
        y     = inv((x.18*x.19))
        z     = x.16^(x.20*inv((x.17*x.18)))
    
    30. X     = x.16^(x.19*x.20*inv(x.17))
        y     = (x.17*inv((x.18*x.19)))
        z     = x.16^(x.20*inv(x.18))
    
    31. X     = x.16^(x.19*inv(x.17))
        y     = (x.17*x.20*inv((x.18*x.19)))
        z     = x.16^(x.20*inv(x.18))
    
    32. X     = x.16^(x.19*inv(x.17))
        y     = (x.20*inv((x.18*x.19)))
        z     = x.16^(x.20*inv((x.17*x.18)))
    
    33. X     = x.16^(x.20*inv(x.18))
        y     = (x.19*inv(x.17))
        z     = x.16^(x.19*x.20*inv((x.17*x.18)))
    
    34. X     = x.16^(x.20*inv((x.17*x.18)))
        y     = (x.18*x.19)
        z     = x.16^(x.19*x.20*inv(x.17))
    
    35. X     = x.16^(x.20*inv((x.18*x.19)))
        y     = (x.19*inv(x.17))
        z     = x.16^(x.20*inv((x.17*x.18)))
    
    36. X     = x.17^(x.18*x.22*inv((x.19*x.20)))
        y     = (x.20*x.21*inv(x.18))
        z     = x.17^(x.21*x.22*inv(x.19))
    
    37. X     = x.17^(x.19*x.22*inv((x.20*x.21)))
        y     = (x.21*inv((x.18*x.19)))
        z     = x.17^(x.22*inv((x.18*x.20)))
    
    38. X     = x.17^(x.19*inv((x.20*x.21)))
        y     = (x.21*x.22*inv((x.18*x.19)))
        z     = x.17^(x.22*inv((x.18*x.20)))
    
    39. X     = x.17^(x.20*x.22*inv(x.18))
        y     = (x.18*x.21*inv((x.19*x.20)))
        z     = x.17^(x.21*x.22*inv(x.19))
    
    40. X     = x.17^(x.20*x.22*inv(x.18))
        y     = (x.21*inv((x.19*x.20)))
        z     = x.17^(x.21*x.22*inv((x.18*x.19)))
    
    41. X     = x.17^(x.22*inv((x.19*x.20)))
        y     = (x.20*x.21*inv(x.18))
        z     = x.17^(x.21*x.22*inv((x.18*x.19)))
    
    42. X     = x.18^(x.20*x.24*inv((x.21*x.22)))
        y     = (x.22*x.23*inv((x.19*x.20)))
        z     = x.18^(x.23*x.24*inv((x.19*x.21)))
    
    43. X     = z.18^inv(y.15)
        y     = y.15
        z     = z.18
    
    44. X     = x.25^x.26
        y     = y.17
        z     = x.25^(y.17*x.26)
    
    45. X     = x.26^inv((y.18*x.28))
        y     = y.18
        z     = x.26^inv(x.28)
    
    46. X     = x.26^(x.28*inv(y.18))
        y     = y.18
        z     = x.26^x.28
    
    47. X     = x.27^(x.30*inv((y.19*x.29)))
        y     = y.19
        z     = x.27^(x.30*inv(x.29))
  */

rule (modulo E) I_4_receive:
   [
   St_I_4( A, ~id, kAB, s, x, Y, 'p', B ),
   In( mac(<'4', map(s, 'p')^x>, h(Y^x)) )
   ]
  --[
  Recv( A, mac(<'4', map(s, 'p')^x>, h(Y^x)) ), Finish( ),
  Commit( A, B, <'I', 'R', map(s, 'p')^x, Y, h(Y^x)> ),
  Secret( A, h(Y^x) ), Honest( A ), Honest( B )
  ]->
   [ St_I_5( A, ~id, kAB, s, x, Y, 'p', B ) ]

  /*
  rule (modulo AC) I_4_receive:
     [
     St_I_4( A, ~id, kAB, s, x, Y, 'p', B ), In( mac(<'4', z>, h(z.1)) )
     ]
    --[
    Recv( A, mac(<'4', z>, h(z.1)) ), Finish( ),
    Commit( A, B, <'I', 'R', z, Y, h(z.1)> ), Secret( A, h(z.1) ),
    Honest( A ), Honest( B )
    ]->
     [ St_I_5( A, ~id, kAB, s, x, Y, 'p', B ) ]
    variants (modulo AC)
     1. Y     = Y.15
        s     = s.17
        x     = one
        z     = map(s.17, 'p')
        z.1   = Y.15
    
     2. Y     = Y.16
        s     = s.18
        x     = x.19
        z     = map(s.18, 'p')^x.19
        z.1   = Y.16^x.19
    
     3. Y     = z.23^inv(x.19)
        s     = s.18
        x     = x.19
        z     = map(s.18, 'p')^x.19
        z.1   = z.23
    
     4. Y     = z.43^x.69
        s     = s.38
        x     = inv(x.69)
        z     = map(s.38, 'p')^inv(x.69)
        z.1   = z.43
    
     5. Y     = z.44^(x.70*inv(x.71))
        s     = s.39
        x     = (x.71*inv(x.70))
        z     = map(s.39, 'p')^(x.71*inv(x.70))
        z.1   = z.44
    
     6. Y     = x.68^x.69
        s     = s.38
        x     = x.39
        z     = map(s.38, 'p')^x.39
        z.1   = x.68^(x.39*x.69)
    
     7. Y     = x.69^x.70
        s     = s.39
        x     = inv((x.70*x.71))
        z     = map(s.39, 'p')^inv((x.70*x.71))
        z.1   = x.69^inv(x.71)
    
     8. Y     = x.69^x.70
        s     = s.39
        x     = (x.71*inv(x.70))
        z     = map(s.39, 'p')^(x.71*inv(x.70))
        z.1   = x.69^x.71
    
     9. Y     = x.69^inv(x.70)
        s     = s.39
        x     = (x.70*x.71)
        z     = map(s.39, 'p')^(x.70*x.71)
        z.1   = x.69^x.71
    
    10. Y     = x.69^inv(x.71)
        s     = s.39
        x     = inv(x.70)
        z     = map(s.39, 'p')^inv(x.70)
        z.1   = x.69^inv((x.70*x.71))
    
    11. Y     = x.69^inv((x.40*x.71))
        s     = s.39
        x     = x.40
        z     = map(s.39, 'p')^x.40
        z.1   = x.69^inv(x.71)
    
    12. Y     = x.69^(x.70*x.71)
        s     = s.39
        x     = inv(x.70)
        z     = map(s.39, 'p')^inv(x.70)
        z.1   = x.69^x.71
    
    13. Y     = x.69^(x.71*inv(x.40))
        s     = s.39
        x     = x.40
        z     = map(s.39, 'p')^x.40
        z.1   = x.69^x.71
    
    14. Y     = x.70^x.71
        s     = s.40
        x     = (x.73*inv((x.71*x.72)))
        z     = map(s.40, 'p')^(x.73*inv((x.71*x.72)))
        z.1   = x.70^(x.73*inv(x.72))
    
    15. Y     = x.70^inv(x.71)
        s     = s.40
        x     = (x.73*inv(x.72))
        z     = map(s.40, 'p')^(x.73*inv(x.72))
        z.1   = x.70^(x.73*inv((x.71*x.72)))
    
    16. Y     = x.70^inv((x.71*x.72))
        s     = s.40
        x     = (x.72*x.73)
        z     = map(s.40, 'p')^(x.72*x.73)
        z.1   = x.70^(x.73*inv(x.71))
    
    17. Y     = x.70^inv((x.72*x.73))
        s     = s.40
        x     = (x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.73*inv(x.71))
        z.1   = x.70^inv((x.71*x.72))
    
    18. Y     = x.70^(x.71*x.73)
        s     = s.40
        x     = (x.72*inv(x.71))
        z     = map(s.40, 'p')^(x.72*inv(x.71))
        z.1   = x.70^(x.72*x.73)
    
    19. Y     = x.70^(x.71*x.73*inv(x.72))
        s     = s.40
        x     = (x.72*inv(x.71))
        z     = map(s.40, 'p')^(x.72*inv(x.71))
        z.1   = x.70^x.73
    
    20. Y     = x.70^(x.71*inv(x.72))
        s     = s.40
        x     = (x.72*x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.72*x.73*inv(x.71))
        z.1   = x.70^x.73
    
    21. Y     = x.70^(x.71*inv((x.72*x.73)))
        s     = s.40
        x     = (x.73*inv(x.71))
        z     = map(s.40, 'p')^(x.73*inv(x.71))
        z.1   = x.70^inv(x.72)
    
    22. Y     = x.70^(x.72*x.73)
        s     = s.40
        x     = inv((x.71*x.72))
        z     = map(s.40, 'p')^inv((x.71*x.72))
        z.1   = x.70^(x.73*inv(x.71))
    
    23. Y     = x.70^(x.73*inv(x.71))
        s     = s.40
        x     = inv((x.72*x.73))
        z     = map(s.40, 'p')^inv((x.72*x.73))
        z.1   = x.70^inv((x.71*x.72))
    
    24. Y     = x.70^(x.73*inv(x.71))
        s     = s.40
        x     = (x.71*x.72)
        z     = map(s.40, 'p')^(x.71*x.72)
        z.1   = x.70^(x.72*x.73)
    
    25. Y     = x.70^(x.73*inv(x.71))
        s     = s.40
        x     = (x.71*inv((x.72*x.73)))
        z     = map(s.40, 'p')^(x.71*inv((x.72*x.73)))
        z.1   = x.70^inv(x.72)
    
    26. Y     = x.70^(x.73*inv(x.72))
        s     = s.40
        x     = inv(x.71)
        z     = map(s.40, 'p')^inv(x.71)
        z.1   = x.70^(x.73*inv((x.71*x.72)))
    
    27. Y     = x.70^(x.73*inv((x.41*x.72)))
        s     = s.40
        x     = x.41
        z     = map(s.40, 'p')^x.41
        z.1   = x.70^(x.73*inv(x.72))
    
    28. Y     = x.71^inv((x.73*x.74))
        s     = s.41
        x     = (x.74*x.75*inv(x.72))
        z     = map(s.41, 'p')^(x.74*x.75*inv(x.72))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    29. Y     = x.71^(x.72*x.75*inv(x.73))
        s     = s.41
        x     = (x.73*x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.73*x.74*inv(x.72))
        z.1   = x.71^(x.74*x.75)
    
    30. Y     = x.71^(x.72*x.75*inv((x.73*x.74)))
        s     = s.41
        x     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.75*inv(x.73))
    
    31. Y     = x.71^(x.72*inv((x.73*x.74)))
        s     = s.41
        x     = (x.74*x.75*inv(x.72))
        z     = map(s.41, 'p')^(x.74*x.75*inv(x.72))
        z.1   = x.71^(x.75*inv(x.73))
    
    32. Y     = x.71^(x.73*x.75)
        s     = s.41
        x     = (x.74*inv((x.72*x.73)))
        z     = map(s.41, 'p')^(x.74*inv((x.72*x.73)))
        z.1   = x.71^(x.74*x.75*inv(x.72))
    
    33. Y     = x.71^(x.73*inv((x.74*x.75)))
        s     = s.41
        x     = (x.75*inv((x.72*x.73)))
        z     = map(s.41, 'p')^(x.75*inv((x.72*x.73)))
        z.1   = x.71^inv((x.72*x.74))
    
    34. Y     = x.71^(x.74*x.75*inv(x.72))
        s     = s.41
        x     = inv((x.73*x.74))
        z     = map(s.41, 'p')^inv((x.73*x.74))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    35. Y     = x.71^(x.74*x.75*inv(x.72))
        s     = s.41
        x     = (x.72*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.72*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv(x.73))
    
    36. Y     = x.71^(x.74*inv(x.72))
        s     = s.41
        x     = (x.72*x.75*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.72*x.75*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv(x.73))
    
    37. Y     = x.71^(x.74*inv(x.72))
        s     = s.41
        x     = (x.75*inv((x.73*x.74)))
        z     = map(s.41, 'p')^(x.75*inv((x.73*x.74)))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    38. Y     = x.71^(x.75*inv(x.73))
        s     = s.41
        x     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.74*x.75*inv((x.72*x.73)))
    
    39. Y     = x.71^(x.75*inv((x.72*x.73)))
        s     = s.41
        x     = (x.73*x.74)
        z     = map(s.41, 'p')^(x.73*x.74)
        z.1   = x.71^(x.74*x.75*inv(x.72))
    
    40. Y     = x.71^(x.75*inv((x.73*x.74)))
        s     = s.41
        x     = (x.74*inv(x.72))
        z     = map(s.41, 'p')^(x.74*inv(x.72))
        z.1   = x.71^(x.75*inv((x.72*x.73)))
    
    41. Y     = x.72^(x.73*x.77*inv((x.74*x.75)))
        s     = s.42
        x     = (x.75*x.76*inv(x.73))
        z     = map(s.42, 'p')^(x.75*x.76*inv(x.73))
        z.1   = x.72^(x.76*x.77*inv(x.74))
    
    42. Y     = x.72^(x.74*x.77*inv((x.75*x.76)))
        s     = s.42
        x     = (x.76*inv((x.73*x.74)))
        z     = map(s.42, 'p')^(x.76*inv((x.73*x.74)))
        z.1   = x.72^(x.77*inv((x.73*x.75)))
    
    43. Y     = x.72^(x.74*inv((x.75*x.76)))
        s     = s.42
        x     = (x.76*x.77*inv((x.73*x.74)))
        z     = map(s.42, 'p')^(x.76*x.77*inv((x.73*x.74)))
        z.1   = x.72^(x.77*inv((x.73*x.75)))
    
    44. Y     = x.72^(x.75*x.77*inv(x.73))
        s     = s.42
        x     = (x.73*x.76*inv((x.74*x.75)))
        z     = map(s.42, 'p')^(x.73*x.76*inv((x.74*x.75)))
        z.1   = x.72^(x.76*x.77*inv(x.74))
    
    45. Y     = x.72^(x.75*x.77*inv(x.73))
        s     = s.42
        x     = (x.76*inv((x.74*x.75)))
        z     = map(s.42, 'p')^(x.76*inv((x.74*x.75)))
        z.1   = x.72^(x.76*x.77*inv((x.73*x.74)))
    
    46. Y     = x.72^(x.77*inv((x.74*x.75)))
        s     = s.42
        x     = (x.75*x.76*inv(x.73))
        z     = map(s.42, 'p')^(x.75*x.76*inv(x.73))
        z.1   = x.72^(x.76*x.77*inv((x.73*x.74)))
    
    47. Y     = x.73^(x.75*x.79*inv((x.76*x.77)))
        s     = s.43
        x     = (x.77*x.78*inv((x.74*x.75)))
        z     = map(s.43, 'p')^(x.77*x.78*inv((x.74*x.75)))
        z.1   = x.73^(x.78*x.79*inv((x.74*x.76)))
  */

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
  case I_3_send
  solve( !KU( mac(<'4', map(~s, 'p')^~x>, h(z)) ) @ #vk )
    case R_4_send
    solve( !KU( mac(<'3', map(s.1, 'p')^~y>, h(map(~s, 'p')^(~x*~y)))
           ) @ #vk.4 )
      case I_3_send
      solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.11 )
        case I_1_send
        solve( !KU( map(~s, 'p')^~x ) @ #vk.11 )
          case I_1_send
          solve( !KU( map(~s, 'p')^~y ) @ #vk.8 )
            case R_2_send_case_1
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4_receive
  solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', map(~s, 'p')^~x>, h(z)) ) @ #vk.1 )
      case R_4_send
      solve( !KU( h(map(~s, 'p')^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, 'p')^(~x*~y) ) @ #vk.13 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.14 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.19 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      qed
    next
      case c_mac
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(Y^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.8 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.5 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.11 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.5 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.18 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.10 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.17 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
next
  case R_3_receive
  solve( St_R_3( A, ~id, kAB, s, X, y, 'p', A.1 ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', map(s, 'p')^~y>, h(z)) ) @ #vk.1 )
      case I_3_send
      solve( !KU( h(map(s, 'p')^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, 'p')^(~x*~y) ) @ #vk.12 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.16 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_mac
      solve( !KU( senc(s, h(~shk)) ) @ #vk.8 )
        case I_1_send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(X^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( X^~y ) @ #vk.12 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.9 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.15 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.9 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.15 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.20 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.20 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.14 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.17 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.18 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.13 )
          case c_h
          solve( !KU( ~shk ) @ #vk.14 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4_receive
  solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', map(~s, 'p')^~x>, h(z)) ) @ #vk.1 )
      case R_4_send
      solve( !KU( h(map(~s, 'p')^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(~s, 'p')^(~x*~y) ) @ #vk.13 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.14 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.19 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.16 )
        qed
      qed
    next
      case c_mac
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(Y^~x) ) @ #vk.1 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.8 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.5 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.11 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.1 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.5 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.18 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.10 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.17 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.4 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
next
  case R_3_receive
  solve( St_R_3( A, ~id, kAB, s, X, y, 'p', A.1 ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', map(s, 'p')^~y>, h(z)) ) @ #vk.1 )
      case I_3_send
      solve( !KU( h(map(s, 'p')^(~x*~y)) ) @ #vk.1 )
        case c_h
        solve( !KU( map(s, 'p')^(~x*~y) ) @ #vk.12 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.16 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.13 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.18 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.15 )
        qed
      qed
    next
      case c_mac
      solve( !KU( senc(s, h(~shk)) ) @ #vk.8 )
        case I_1_send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(X^~y) ) @ #vk.3 )
            case c_h
            solve( !KU( X^~y ) @ #vk.12 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.9 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.15 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.3 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.9 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.15 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.20 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.20 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.14 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.17 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.18 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.13 )
          case c_h
          solve( !KU( ~shk ) @ #vk.14 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, s, x, Y, 'p', b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', map(~s, 'p')^~x>, h(z)) ) @ #vk )
      case R_4_send
      solve( !KU( mac(<'3', map(s.1, 'p')^~y>, h(map(~s, 'p')^(~x*~y)))
             ) @ #vk.4 )
        case I_3_send
        solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.11 )
          case I_1_send
          by contradiction /* from formulas */
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.12 )
            case I_1_send
            solve( !KU( ~shk ) @ #vk.15 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( h(map(~s, 'p')^(~x*~y)) ) @ #vk.13 )
          case c_h
          solve( !KU( map(~s, 'p')^(~x*~y) ) @ #vk.16 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.20 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.22 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.19 )
          qed
        qed
      qed
    next
      case c_mac
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(Y^~x) ) @ #vk.5 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.8 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.5 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.11 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.5 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.5 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.18 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.10 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.17 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'I', 'R', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, s, x, Y, 'p', b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', map(~s, 'p')^~x>, h(z)) ) @ #vk )
      case R_4_send
      solve( !KU( mac(<'3', map(s.1, 'p')^~y>, h(map(~s, 'p')^(~x*~y)))
             ) @ #vk.4 )
        case I_3_send
        solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.11 )
          case I_1_send
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                            h(map(~s, 'p')^(~x*~y))>
                   ) @ #i2 )
              case I_4_receive
              solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                     ) ▶₀ #i2 )
                case I_3_send
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                            h(map(~s, 'p')^(~x*~y))>
                   ) @ #i2 )
              case I_4_receive
              solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                     ) ▶₀ #i2 )
                case I_3_send
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( ~s ) @ #vk.12 )
            case I_1_send
            solve( !KU( ~shk ) @ #vk.15 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( h(map(~s, 'p')^(~x*~y)) ) @ #vk.13 )
          case c_h
          solve( !KU( map(~s, 'p')^(~x*~y) ) @ #vk.16 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.17 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.20 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.22 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.19 )
          qed
        qed
      qed
    next
      case c_mac
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( z^inv(~x) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x.1 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.1 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.10 )
        qed
      next
        case split_case_2
        solve( !KU( h(Y^~x) ) @ #vk.5 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.8 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.5 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.8 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.11 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.5 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.8 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.5 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.14 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.18 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.10 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.12 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.11 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.12 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.13 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.17 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.12 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.11 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.11 )
        qed
      next
        case split_case_5
        solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.16 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.18 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case split_case_6
        solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.12 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.17 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.19 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.13 )
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, s, X, y, 'p', b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', map(s, 'p')^~y>, h(z)) ) @ #vk )
      case I_3_send
      solve( !KU( senc(s, h(~shk)) ) @ #vk.7 )
        case I_1_send
        solve( !KU( map(~s, 'p')^~x ) @ #vk.7 )
          case I_1_send_case_1
          by contradiction /* from formulas */
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case R_2_send
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.12 )
          case c_h
          solve( !KU( ~shk ) @ #vk.13 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( senc(s, h(~shk)) ) @ #vk.7 )
        case I_1_send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(X^~y) ) @ #vk.9 )
            case c_h
            solve( !KU( X^~y ) @ #vk.12 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.9 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.15 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.9 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.9 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.15 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.20 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.20 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.14 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.17 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.18 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.13 )
          case c_h
          solve( !KU( ~shk ) @ #vk.14 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'R', 'I', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, s, X, y, 'p', b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', map(s, 'p')^~y>, h(z)) ) @ #vk )
      case I_3_send
      solve( !KU( senc(s, h(~shk)) ) @ #vk.7 )
        case I_1_send
        solve( !KU( map(~s, 'p')^~x ) @ #vk.7 )
          case I_1_send_case_1
          solve( (#i2 < #i)  ∥ (#i < #i2) )
            case case_1
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                            h(map(~s, 'p')^(~x*~y))>
                   ) @ #i2 )
              case R_3_receive
              solve( St_R_3( a2, ~id.1, kAB, ~s, map(~s, 'p')^~x, ~y, 'p', b2
                     ) ▶₀ #i2 )
                case R_2_send
                by contradiction /* cyclic */
              qed
            qed
          next
            case case_2
            solve( Commit( a2, b2,
                           <'R', 'I', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                            h(map(~s, 'p')^(~x*~y))>
                   ) @ #i2 )
              case R_3_receive
              solve( St_R_3( a2, ~id.1, kAB, ~s, map(~s, 'p')^~x, ~y, 'p', b2
                     ) ▶₀ #i2 )
                case R_2_send
                by contradiction /* cyclic */
              qed
            qed
          qed
        next
          case I_1_send_case_2
          by solve( !KU( ~x ) @ #vk.12 )
        next
          case R_2_send
          by solve( !KU( ~x ) @ #vk.14 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.12 )
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.12 )
          case c_h
          solve( !KU( ~shk ) @ #vk.13 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( senc(s, h(~shk)) ) @ #vk.7 )
        case I_1_send
        solve( splitEqs(0) )
          case split_case_1
          solve( !KU( h(X^~y) ) @ #vk.9 )
            case c_h
            solve( !KU( X^~y ) @ #vk.12 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.9 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.15 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.12 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.14 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.13 )
            qed
          qed
        next
          case split_case_2
          solve( !KU( z^inv(~y) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.14 )
          qed
        next
          case split_case_3
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.9 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.12 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.13 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.16 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.14 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.17 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.15 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.9 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.15 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.18 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.15 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.20 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.18 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.20 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.14 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.16 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.15 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.17 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.18 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.19 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.15 )
            qed
          qed
        next
          case split_case_4
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.16 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.15 )
          qed
        next
          case split_case_5
          solve( !KU( x^(x.1*inv(~y)) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.13 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.15 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.18 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.20 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.16 )
          qed
        next
          case split_case_6
          solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.14 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.16 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.15 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.16 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.19 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.21 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.17 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.18 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.17 )
          qed
        qed
      next
        case c_senc
        solve( !KU( h(~shk) ) @ #vk.13 )
          case c_h
          solve( !KU( ~shk ) @ #vk.14 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

restriction noselfkey:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

/* All well-formedness checks were successful. */

end