theory P4 begin

// Function signature and definition of the equational theory E

functions: fst/1, h/1, kdf/3, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) SharedKeySetup:
   [ Fr( ~shk ) ]
  --[ KeySetup( $A, $B ), NotEq( $A, $B ) ]->
   [ !SharedKey( $A, $B, ~shk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !SharedKey( A, B, kAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( kAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_I( A, ~id ) ]->
   [ St_I_1( A, ~id, kAB, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_R( B, ~id ) ]->
   [ St_R_1( B, ~id, kAB, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1_send:
   [ St_I_1( A, ~id, kAB, B ), Fr( ~x ), Fr( ~s ) ]
  --[ Send( A, <'1', ~x, senc(~s, h(kAB))> ) ]->
   [
   St_I_2( A, ~id, kAB, ~x, ~s, B ),
   Out( <'1', ~x, senc(~s, h(kAB))> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1_receive:
   [ St_R_1( B, ~id, kAB, A ), In( <'1', x, senc(s, h(kAB))> ) ]
  --[ Recv( B, <'1', x> ) ]->
   [ St_R_2( B, ~id, kAB, x, s, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2_send:
   [ St_R_2( B, ~id, kAB, x, s, A ), Fr( ~y ) ]
  --[ Send( B, <'2', ~y> ) ]->
   [ St_R_3( B, ~id, kAB, x, s, ~y, A ), Out( <'2', ~y> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2_receive:
   [ St_I_2( A, ~id, kAB, x, s, B ), In( <'2', y> ) ]
  --[ Recv( A, <'2', y> ) ]->
   [ St_I_3( A, ~id, kAB, x, s, y, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3_send:
   [ St_I_3( A, ~id, kAB, x, s, y, B ) ]
  --[
  Send( A, mac(<'3', y>, kdf(s, x, y)) ),
  Running( A, B, <'R', 'I', x, y, kdf(s, x, y)> )
  ]->
   [
   St_I_4( A, ~id, kAB, x, s, y, B ),
   Out( mac(<'3', y>, kdf(s, x, y)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_3_receive:
   [
   St_R_3( B, ~id, kAB, x, s, y, A ),
   In( mac(<'3', y>, kdf(s, x, y)) )
   ]
  --[
  Recv( B, mac(<'3', y>, kdf(s, x, y)) ),
  Running( B, A, <'I', 'R', x, y, kdf(s, x, y)> ),
  Commit( B, A, <'R', 'I', x, y, kdf(s, x, y)> ), Honest( A ),
  Honest( B ), Secret( B, kdf(s, x, y) )
  ]->
   [ St_R_4( B, ~id, kAB, x, s, y, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_4_send:
   [ St_R_4( B, ~id, kAB, x, s, y, A ) ]
  --[ Send( B, mac(<'4', x>, kdf(s, x, y)) ) ]->
   [
   St_R_5( B, ~id, kAB, x, s, y, A ),
   Out( mac(<'4', x>, kdf(s, x, y)) )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_4_receive:
   [
   St_I_4( A, ~id, kAB, x, s, y, B ),
   In( mac(<'4', x>, kdf(s, x, y)) )
   ]
  --[
  Recv( A, mac(<'4', x>, kdf(s, x, y)) ), Finish( ),
  Commit( A, B, <'I', 'R', x, y, kdf(s, x, y)> ),
  Secret( A, kdf(s, x, y) ), Honest( A ), Honest( B )
  ]->
   [ St_I_5( A, ~id, kAB, x, s, y, B ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_I_4( A, ~id, kAB, x, s, y, B ) ▶₀ #i )
  case I_3_send
  solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
    case R_4_send
    solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.9 )
      case I_1_send
      solve( !KU( ~x ) @ #vk.9 )
        case I_1_send
        solve( !KU( ~y ) @ #vk.7 )
          case R_2_send
          solve( !KU( mac(<'3', ~y>, kdf(~s, ~x, ~y)) ) @ #vk.8 )
            case I_3_send
            SOLVED // trace found
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4_receive
  solve( St_I_4( A, ~id, kAB, x, s, y, B ) ▶₀ #i )
    case I_3_send
    solve( !KU( kdf(~s, ~x, y) ) @ #vk )
      case c_kdf
      solve( !KU( ~s ) @ #vk.5 )
        case I_1_send
        solve( !KU( ~shk ) @ #vk.8 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
next
  case R_3_receive
  solve( St_R_3( A, ~id, kAB, x, s, y, A.1 ) ▶₀ #i )
    case R_2_send
    solve( !KU( kdf(s, x, ~y) ) @ #vk )
      case c_kdf
      solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk.1 )
        case I_3_send
        solve( !KU( ~s ) @ #vk.7 )
          case I_1_send
          solve( !KU( ~shk.1 ) @ #vk.12 )
            case Reveal
            solve( !KU( senc(~s, h(~shk)) ) @ #vk.9 )
              case I_1_send
              by contradiction /* from formulas */
            next
              case c_senc
              solve( !KU( h(~shk) ) @ #vk.13 )
                case c_h
                solve( !KU( ~shk ) @ #vk.14 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( senc(s, h(~shk)) ) @ #vk.6 )
          case I_1_send
          solve( !KU( ~s ) @ #vk.7 )
            case I_1_send
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~shk) ) @ #vk.11 )
            case c_h
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, x, s, y, b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case R_4_send
      solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.9 )
        case I_1_send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case I_1_send
          solve( !KU( ~shk ) @ #vk.13 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.5 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.8 )
          case I_1_send
          solve( !KU( ~shk ) @ #vk.10 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'I', 'R', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, x, s, y, b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<'4', ~x>, kdf(~s, ~x, y)) ) @ #vk )
      case R_4_send
      solve( !KU( senc(~s, h(~shk.1)) ) @ #vk.9 )
        case I_1_send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case I_4_receive
            solve( St_I_4( a2, ~id.1, kAB, ~x, ~s, ~y, b2 ) ▶₀ #i2 )
              case I_3_send
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'I', 'R', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case I_4_receive
            solve( St_I_4( a2, ~id.1, kAB, ~x, ~s, ~y, b2 ) ▶₀ #i2 )
              case I_3_send
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.10 )
          case I_1_send
          solve( !KU( ~shk ) @ #vk.13 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(~s, ~x, y) ) @ #vk.5 )
        case c_kdf
        solve( !KU( ~s ) @ #vk.8 )
          case I_1_send
          solve( !KU( ~shk ) @ #vk.10 )
            case Reveal
            by contradiction /* from formulas */
          qed
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, x, s, y, b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk )
      case I_3_send
      solve( !KU( senc(~s, h(~shk)) ) @ #vk.5 )
        case I_1_send
        by contradiction /* from formulas */
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.9 )
          case I_1_send
          solve( !KU( ~shk.1 ) @ #vk.12 )
            case Reveal
            solve( !KU( h(~shk) ) @ #vk.12 )
              case c_h
              solve( !KU( ~shk ) @ #vk.13 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(s, x, ~y) ) @ #vk.7 )
        case c_kdf
        solve( !KU( senc(s, h(~shk)) ) @ #vk.6 )
          case I_1_send
          solve( !KU( ~s ) @ #vk.10 )
            case I_1_send
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~shk) ) @ #vk.11 )
            case c_h
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'R', 'I', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, x, s, y, b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<'3', ~y>, kdf(s, x, ~y)) ) @ #vk )
      case I_3_send
      solve( !KU( senc(~s, h(~shk)) ) @ #vk.5 )
        case I_1_send
        solve( (#i2 < #i)  ∥ (#i < #i2) )
          case case_1
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case R_3_receive
            solve( St_R_3( a2, ~id.1, kAB, ~x, ~s, ~y, b2 ) ▶₀ #i2 )
              case R_2_send
              by contradiction /* cyclic */
            qed
          qed
        next
          case case_2
          solve( Commit( a2, b2, <'R', 'I', ~x, ~y, kdf(~s, ~x, ~y)>
                 ) @ #i2 )
            case R_3_receive
            solve( St_R_3( a2, ~id.1, kAB, ~x, ~s, ~y, b2 ) ▶₀ #i2 )
              case R_2_send
              by contradiction /* cyclic */
            qed
          qed
        qed
      next
        case c_senc
        solve( !KU( ~s ) @ #vk.9 )
          case I_1_send
          solve( !KU( ~shk.1 ) @ #vk.12 )
            case Reveal
            solve( !KU( h(~shk) ) @ #vk.12 )
              case c_h
              solve( !KU( ~shk ) @ #vk.13 )
                case Reveal
                by contradiction /* from formulas */
              qed
            qed
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( kdf(s, x, ~y) ) @ #vk.7 )
        case c_kdf
        solve( !KU( senc(s, h(~shk)) ) @ #vk.6 )
          case I_1_send
          solve( !KU( ~s ) @ #vk.10 )
            case I_1_send
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~shk) ) @ #vk.11 )
            case c_h
            solve( !KU( ~shk ) @ #vk.12 )
              case Reveal
              by contradiction /* from formulas */
            qed
          qed
        qed
      qed
    qed
  qed
qed

restriction noselfkey:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

/* All well-formedness checks were successful. */

end