theory P2a
begin


builtins: symmetric-encryption
functions: mac/2

/*
	We want to formalize the following protocol
	protocol {
		1. A -> B: {'1', x}
		2. B -> A: {'2', y}
		3. A -> B: {'3', y}_k(B,A)  (as a MAC)
		4. B -> A: {'4', x}_k(A,B)  (as a MAC)
	}
*/

// Setup a shared key with two parties
rule SetupKey:
  [ Fr(~shk) ]
--[ KeySetup($A, $B), NotEq($A, $B) ]->
  [ !SharedKey($A, $B, ~shk) ]


rule Reveal:
  [ !SharedKey(A, B, kAB)]
--[ Reveal(A), Reveal(B) ]->
  [ Out(kAB) ]


// Initialize Initiator
rule Init_I:
  [ Fr(~id), !SharedKey(A, B, kAB), !SharedKey(B, A, kBA)]
--[ Create_I(A, ~id) ]->
  [ St_I_1(A, ~id, kAB, kBA, B) ]

// Initialize Responder
rule Init_R:
  [ Fr(~id), !SharedKey(A, B, kAB), !SharedKey(B, A, kBA) ]
--[ Create_R(B, ~id) ]->
  [ St_R_1(B, ~id, kAB, kBA, A) ]

// 1. I send
rule I_1_send:
  [ St_I_1(A, ~id, kAB, kBA, B), Fr(~x) ]
--[ Send(A, <'1', ~x>) ]->
  [ St_I_2(A, ~id, kAB, kBA, ~x, B), Out(<'1', ~x>) ]


// 1. R receive
rule R_1_receive:
  [ St_R_1(B, ~id, kAB, kBA, A), In(<'1', x>) ]
--[ Recv(B, <'1', x>) ]->
  [ St_R_2(B, ~id, kAB, kBA, x, A) ]


// 2. R send
rule R_2_send:
  [ St_R_2(B, ~id, kAB, kBA, x, A), Fr(~y) ]
--[ Send(B, <'2', ~y>) ]->
  [ St_R_3(B, ~id, kAB, kBA, x, ~y, A), Out(<'2', ~y>) ]

// 2. I receive
rule I_2_receive:
  [ St_I_2(A, ~id, kAB, kBA, x, B), In(<'2', y>) ]
--[ Recv(A, <'2', y>) ]->
  [ St_I_3(A, ~id, kAB, kBA, x, y, B) ]

// 3. I send
rule I_3_send:
  let macA3 = mac(y, kBA)
  in
  [ St_I_3(A, ~id, kAB, kBA, x, y, B) ]
--[ Send(A, <'3', macA3>), Running(A, B, <'R', 'I', <x, y>>) ]->
  [ St_I_4(A, ~id, kAB, kBA, x, y, B), Out(<'3', macA3>) ]


// 3. R receive
rule R_3_receive:
  let macB3 = mac(y, kBA)
  in
  [ St_R_3(B, ~id, kAB, kBA, x, y, A), In(<'3', macB3>) ]
--[ Recv(B, <'3', macB3>), Commit(B, A, <'R', 'I', <x, y>>), Running(B, A, <'I', 'R', <x, y>>), Honest(B) ]->
  [ St_R_4(B, ~id, kAB, kBA, x, y, A) ]


// 4. R send
rule R_4_send:
  let macB4 = mac(x, kAB)
  in
  [ St_R_4(B, ~id, kAB, kBA, x, y, A) ]
--[ Send(B, <'4', macB4>) ]->
  [ St_R_5(B, ~id, kAB, kBA, x, y, A), Out(<'4', macB4>) ]


// 4. I receive
rule I_4_receive:
  let macA4 = mac(x, kAB)
  in
  [ St_I_4(A, ~id, kAB, kBA, x, y, B), In(<'4', macA4>) ]
--[ Recv(A, <'4', macA4>), Commit(A, B, <'I', 'R', <x, y>>), Honest(A), Finish() ]->
  [ St_I_5(A, ~id, kAB, kBA, x, y, B) ]


/**
	Lemmas
**/

lemma executable:
  exists-trace
    "Ex #i. Finish() @i & not (Ex A #j. Reveal(A)@j)"


lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & j < i
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


/**
	Restrictions
**/
restriction noselfkey:
  " All X Y #i. NotEq(X,Y) @i ==> not (X = Y)"


/* I'm not sure if we can do that, because of a too tight restriction. (refering to discussion of the exercise session) */
restriction noselfcommunication:
  "(All X Y id1 id2 #i #j. Create_I(X, id1)@i & Create_I(Y, id2)@j ==> X = Y & id1 = id2 & #i = #j)
   & (All X Y id1 id2 #i #j. Create_R(X, id1)@i & Create_R(Y, id2)@j ==> X = Y & id1 = id2 & #i = #j)"

restriction onlyonekeysetup:
  " All X Y #i #j. KeySetup(X, Y)@i & KeySetup(X, Y)@j ==> #i = #j"


end