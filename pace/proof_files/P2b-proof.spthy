theory P2b begin

// Function signature and definition of the equational theory E

functions: fst/1, mac/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) SetupKey:
   [ Fr( ~shk ) ]
  --[ KeySetup( $A, $B ), NotEq( $A, $B ) ]->
   [ !SharedKey( $A, $B, ~shk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !SharedKey( A, B, kAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( kAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !SharedKey( A, B, kAB ), !SharedKey( B, A, kBA ) ]
  --[ Create_I( A, ~id ) ]->
   [ St_I_1( A, ~id, kAB, kBA, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !SharedKey( A, B, kAB ), !SharedKey( B, A, kBA ) ]
  --[ Create_R( B, ~id ) ]->
   [ St_R_1( B, ~id, kAB, kBA, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1_send:
   [ St_I_1( A, ~id, kAB, kBA, B ), Fr( ~x ) ]
  --[ Send( A, <'1', ~x> ) ]->
   [ St_I_2( A, ~id, kAB, kBA, ~x, B ), Out( <'1', ~x> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1_receive:
   [ St_R_1( B, ~id, kAB, kBA, A ), In( <'1', x> ) ]
  --[ Recv( B, <'1', x> ) ]->
   [ St_R_2( B, ~id, kAB, kBA, x, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2_send:
   [ St_R_2( B, ~id, kAB, kBA, x, A ), Fr( ~y ) ]
  --[ Send( B, <'2', ~y> ) ]->
   [ St_R_3( B, ~id, kAB, kBA, x, ~y, A ), Out( <'2', ~y> ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2_receive:
   [ St_I_2( A, ~id, kAB, kBA, x, B ), In( <'2', y> ) ]
  --[ Recv( A, <'2', y> ) ]->
   [ St_I_3( A, ~id, kAB, kBA, x, y, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3_send:
   [ St_I_3( A, ~id, kAB, kBA, x, y, B ) ]
  --[
  Send( A, <'3', mac(<x, y>, kBA)> ),
  Running( A, B, <'R', 'I', x, y> )
  ]->
   [
   St_I_4( A, ~id, kAB, kBA, x, y, B ), Out( <'3', mac(<x, y>, kBA)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_3_receive:
   [
   St_R_3( B, ~id, kAB, kBA, x, y, A ), In( <'3', mac(<x, y>, kBA)> )
   ]
  --[
  Recv( B, <'3', mac(<x, y>, kBA)> ),
  Running( B, A, <'I', 'R', x, y> ),
  Commit( B, A, <'R', 'I', x, y> ), Honest( B )
  ]->
   [ St_R_4( B, ~id, kAB, kBA, x, y, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_4_send:
   [ St_R_4( B, ~id, kAB, kBA, x, y, A ) ]
  --[ Send( B, <'4', mac(<x, y>, kAB)> ) ]->
   [
   St_R_5( B, ~id, kAB, kBA, x, y, A ), Out( <'4', mac(<x, y>, kAB)> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_4_receive:
   [
   St_I_4( A, ~id, kAB, kBA, x, y, B ), In( <'4', mac(<x, y>, kAB)> )
   ]
  --[
  Recv( A, <'4', mac(<x, y>, kAB)> ), Finish( ),
  Commit( A, B, <'I', 'R', x, y> ), Honest( A )
  ]->
   [ St_I_5( A, ~id, kAB, kBA, x, y, B ) ]

  /* has exactly the trivial AC variant */

lemma executable:
  exists-trace
  "∃ #i.
    (((Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))) ∧
     (∀ X Y id1 id2 #i.1 #j.
       ((Create_I( X, id1 ) @ #i.1) ∧ (Create_I( Y, id2 ) @ #j)) ⇒
       (((X = Y) ∧ (id1 = id2)) ∧ (#i.1 = #j)))) ∧
    (∀ X Y id1 id2 #i.1 #j.
      ((Create_R( X, id1 ) @ #i.1) ∧ (Create_R( Y, id2 ) @ #j)) ⇒
      (((X = Y) ∧ (id1 = id2)) ∧ (#i.1 = #j)))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i.
  (Finish( ) @ #i)
 ∧
  (∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥) ∧
  (∀ X Y id1 id2 #i.1 #j.
    (Create_I( X, id1 ) @ #i.1) ∧ (Create_I( Y, id2 ) @ #j)
   ⇒
    (X = Y) ∧ (id1 = id2) ∧ (#i.1 = #j)) ∧
  (∀ X Y id1 id2 #i.1 #j.
    (Create_R( X, id1 ) @ #i.1) ∧ (Create_R( Y, id2 ) @ #j)
   ⇒
    (X = Y) ∧ (id1 = id2) ∧ (#i.1 = #j))"
*/
simplify
solve( St_I_4( A, ~id, kAB, kBA, x, y, B ) ▶₀ #i )
  case I_3_send
  solve( !KU( mac(<~x, y>, ~shk) ) @ #vk.2 )
    case R_4_send
    solve( !KU( mac(<~x, ~y>, ~shk.2) ) @ #vk.8 )
      case I_3_send
      solve( !KU( ~x ) @ #vk.11 )
        case I_1_send
        solve( !KU( ~y ) @ #vk.8 )
          case R_2_send
          SOLVED // trace found
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, kBA, x, y, b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<~x, y>, ~shk) ) @ #vk.2 )
      case I_3_send
      by contradiction /* from formulas */
    next
      case R_4_send
      by contradiction /* from formulas */
    next
      case c_mac
      solve( !KU( ~shk ) @ #vk.7 )
        case Reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'I', 'R', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, kBA, x, y, b ) ▶₀ #i )
    case I_3_send
    solve( !KU( mac(<~x, y>, ~shk) ) @ #vk.2 )
      case I_3_send
      by contradiction /* from formulas */
    next
      case R_4_send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_4_receive
          solve( St_I_4( a2, ~id.1, kAB, kBA, ~x, ~y, b2 ) ▶₀ #i2 )
            case I_3_send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'I', 'R', ~x, ~y> ) @ #i2 )
          case I_4_receive
          solve( St_I_4( a2, ~id.1, kAB, kBA, ~x, ~y, b2 ) ▶₀ #i2 )
            case I_3_send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case c_mac
      solve( !KU( ~shk ) @ #vk.7 )
        case Reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, kBA, x, y, b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<x, ~y>, ~shk.1) ) @ #vk.2 )
      case I_3_send
      by contradiction /* from formulas */
    next
      case R_4_send
      by contradiction /* cyclic */
    next
      case c_mac
      solve( !KU( ~shk.1 ) @ #vk.7 )
        case Reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'R', 'I', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, kBA, x, y, b ) ▶₀ #i )
    case R_2_send
    solve( !KU( mac(<x, ~y>, ~shk.1) ) @ #vk.2 )
      case I_3_send
      solve( (#i2 < #i)  ∥ (#i < #i2) )
        case case_1
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_3_receive
          solve( St_R_3( a2, ~id.1, kAB, kBA, ~x, ~y, b2 ) ▶₀ #i2 )
            case R_2_send
            by contradiction /* cyclic */
          qed
        qed
      next
        case case_2
        solve( Commit( a2, b2, <'R', 'I', ~x, ~y> ) @ #i2 )
          case R_3_receive
          solve( St_R_3( a2, ~id.1, kAB, kBA, ~x, ~y, b2 ) ▶₀ #i2 )
            case R_2_send
            by contradiction /* cyclic */
          qed
        qed
      qed
    next
      case R_4_send
      by contradiction /* cyclic */
    next
      case c_mac
      solve( !KU( ~shk.1 ) @ #vk.7 )
        case Reveal
        by contradiction /* from formulas */
      qed
    qed
  qed
qed

restriction noselfkey:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

/* All well-formedness checks were successful. */

end