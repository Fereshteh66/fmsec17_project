theory P5d
begin

builtins: symmetric-encryption, hashing, diffie-hellman
functions: mac/2, map/2

/*
  Written by Fabian Murer
  
  We want to model the following protocol

  A -> B  <p, g^x, senc(s)h(kAB)>
  B -> A  g^y
  A -> B  g^y_h(g^xy)
  B -> A  g^x_h(g^xy)
*/


// Setup a shared key with two parties
rule SharedKeySetup:
  [ Fr(~shk) ]
--[ KeySetup($A, $B), NotEq($A, $B) ]->
  [ !SharedKey($A, $B, ~shk) ]

rule Reveal:
  [ !SharedKey(A, B, kAB) ]
--[ Reveal(A), Reveal(B) ]->
  [ Out(kAB) ]

// Initialize Initiator
rule Init_I:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_I(A, ~id) ]->
  [ St_I_1(A, ~id, kAB, B) ]

// Initialize Responder
rule Init_R:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_R(B, ~id) ]->
  [ St_R_1(B, ~id, kAB, A) ]


// 1. I send
rule I_1_send:
  let g = map(~s, 'p')
      m = <'p', g ^ ~x, senc{~s}h(kAB)>
  in
  [ St_I_1(A, ~id, kAB, B), Fr(~s), Fr(~x) ]
--[ Send(A, m) ]->
  [ St_I_2(A, ~id, kAB, ~s, ~x, 'p', B), Out(m) ]

// 1. R receive
rule R_1_receive:
  let m = <'p', X, senc{s}h(kAB)>
  in
  [ St_R_1(B, ~id, kAB, A), In(m) ]
--[ Recv(B, m) ]->
  [ St_R_2(B, ~id, kAB, s, X, 'p', A) ]


// 2. R send
rule R_2_send:
  let g = map(s, 'p')
  in
  [ St_R_2(B, ~id, kAB, s, X, 'p', A), Fr(~y) ]
--[ Send(B, g ^ ~y) ]->
  [ St_R_3(B, ~id, kAB, s, X, ~y, 'p', A), Out(g ^ ~y) ]


// 2. I receive
rule I_2_receive:
  [ St_I_2(A, ~id, kAB, s, x, 'p', B), In(Y) ]
--[ Recv(A, Y) ]->
  [ St_I_3(A, ~id, kAB, s, x, Y, 'p', B) ]


// 3. I send
rule I_3_send:
  let g = map(s, 'p')
      m = mac(g ^ x, h(Y ^ x))
  in
  [ St_I_3(A, ~id, kAB, s, x, Y, 'p', B) ]
--[ Send(A, m), Running(A, B, <'R', 'I', <g ^ x, Y, h(Y ^ x)>>) ]->
  [ St_I_4(A, ~id, kAB, s, x, Y, 'p', B), Out(m) ]


// 3. R receive
rule R_3_receive:
  let g = map(s, 'p')
      m = mac(X, h(X ^ y))
  in
  [ St_R_3(B, ~id, kAB, s, X, y, 'p', A), In(m) ]
--[ Recv(B, m), Running(B, A, <'I', 'R', <X, g ^ y, h(X ^ y)>>), Commit(B, A, <'R', 'I', <X, g ^ y, h(X ^ y)>>), Honest(A), Honest(B), Secret(B, h(X ^ y)) ]->
  [ St_R_4(B, ~id, kAB, s, X, y, 'p', A) ]


// 4. R send
rule R_4_send:
  let g = map(s, 'p')
      m = mac(g ^ y, h(X ^ y))
  in
  [ St_R_4(B, ~id, kAB, s, X, y, 'p', A) ]
--[ Send(B, m) ]->
  [ St_R_5(B, ~id, kAB, s, X, y, 'p', A), Out(m) ]


// 4. I receive
rule I_4_receive:
  let g = map(s, 'p')
      //m = mac(Y, h(Y ^ x))
  in
  [ St_I_4(A, ~id, kAB, s, x, Y, 'p', B), In(mac(Z, h(Y ^ x))) ]
--[ Recv(A, mac(Z, h(Y ^ x))), Finish(), Commit(A, B, <'I', 'R', <g ^ x, Y, h(Y ^ x)>>), Secret(A, h(Y ^ x)), Honest(A), Honest(B), Differ(Z, g ^ x)  ]->
  [ St_I_5(A, ~id, kAB, s, x, Y, 'p', B) ]



// need to execute manually to get the correct execution displayed (unless you have the last restriction active).
lemma executable:
  exists-trace
    "Ex #i. Finish() @i & not (Ex A #j. Reveal(A)@j)"


lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma secrecy_PFS:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"
        

lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & j < i
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

/**
  Restrictions
**/
restriction noselfkey:
  " All X Y #i. NotEq(X,Y) @i ==> not (X = Y)"

restriction differ:
  " All x y #i. Differ(x, y)@i ==> not (x = y)"

end