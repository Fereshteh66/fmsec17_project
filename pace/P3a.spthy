theory P3a
begin


functions: kdf/3, mac/2

/*
	We want to formalize the following protocol:

	A -> B: {'1', x}
	B -> A: {'2', <y, x_Kab>}
	A -> B: {'3', y}_Kab
*/


// Setup a shared key with two parties
rule SharedKeySetup:
  [ Fr(~shk) ]
--[ KeySetup($A, $B), NotEq($A, $B) ]->
  [ !SharedKey($A, $B, ~shk) ]

rule Reveal:
  [ !SharedKey(A, B, kAB) ]
--[ Reveal(A), Reveal(B) ]->
  [ Out(kAB) ]

// Initialize Initiator
rule Init_I:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_I(A, ~id) ]->
  [ St_I_1(A, ~id, kAB, B) ]

// Initialize Responder
rule Init_R:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_R(B, ~id) ]->
  [ St_R_1(B, ~id, kAB, A) ]

// 1. I send
rule I_1_send:
  [ St_I_1(A, ~id, kAB, B), Fr(~x) ]
--[ Send(A, <'1', ~x>) ]->
  [ St_I_2(A, ~id, kAB, ~x, B), Out(<'1', ~x>) ]

// 1. R receive
rule R_1_receive:
  [ St_R_1(B, ~id, kAB, A), In(<'1', x>) ]
--[ Recv(B, <'1', x>) ]->
  [ St_R_2(B, ~id, kAB, x, A) ]

// 2. R send
rule R_2_send:
  let mac1 = mac(<x, ~y>, kdf(kAB, x, ~y))
  in
  [ St_R_2(B, ~id, kAB, x, A), Fr(~y) ]
--[ Send(B, <'2', <~y, mac1>>), Running(B, A, <'I', 'R', <x, ~y, kdf(kAB, x, ~y)>>) ]->
  [ St_R_3(B, ~id, kAB, x, ~y, A), Out(<'2', <~y, mac1>>) ]


// 2. I receive
rule I_2_receive:
  let mac1 = mac(<x, y>, kdf(kAB, x, y))
  in
  [ St_I_2(A, ~id, kAB, x, B), In(<'2', <y, mac1>>) ]
--[ Recv(A, <'2', <y, mac1>>), Commit(A, B, <'I', 'R', <x, y, kdf(kAB, x, y)>>), Honest(A), Secret(A, kdf(kAB, x, y)), Running(A, B, <'R', 'I', <x, y, kdf(kAB, x, y)>>) ]->
  [ St_I_3(A, ~id, kAB, x, y, B) ]


// 3. I send
rule I_3_send:
  let mac2 = mac(y, kdf(kAB, x, y))
  in
  [ St_I_3(A, ~id, kAB, x, y, B) ]
--[ Send(A, <'3', mac2>) ]->
  [ St_I_4(A, ~id, kAB, x, y, B), Out(<'3', mac2>) ]


// 3. R receive
rule R_3_receive:
  let mac2 = mac(y, kdf(kAB, x, y))
  in
  [ St_R_3(B, ~id, kAB, x, y, A), In(<'3', mac2>) ]
--[ Recv(B, <'3', mac2>), Finish(), Commit(B, A, <'R', 'I', <x, y, kdf(kAB, x, y)>>), Honest(B), Secret(B, kdf(kAB, x, y)) ]->
  [ St_R_4(B, ~id, kAB, x, y, A) ]




lemma executable:
  exists-trace
    "Ex #i. Finish() @i & not (Ex A #j. Reveal(A)@j)"


lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"


lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & j < i
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end