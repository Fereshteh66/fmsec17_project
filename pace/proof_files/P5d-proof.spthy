theory P5d begin

// Function signature and definition of the equational theory E

builtins: diffie-hellman
functions: fst/1, h/1, mac/2, map/2, pair/2, sdec/2, senc/2, snd/1
equations:
    fst(<x.1, x.2>) = x.1,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2

rule (modulo E) SharedKeySetup:
   [ Fr( ~shk ) ]
  --[ KeySetup( $A, $B ), NotEq( $A, $B ) ]->
   [ !SharedKey( $A, $B, ~shk ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Reveal:
   [ !SharedKey( A, B, kAB ) ]
  --[ Reveal( A ), Reveal( B ) ]->
   [ Out( kAB ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_I:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_I( A, ~id ) ]->
   [ St_I_1( A, ~id, kAB, B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Init_R:
   [ Fr( ~id ), !SharedKey( A, B, kAB ) ]
  --[ Create_R( B, ~id ) ]->
   [ St_R_1( B, ~id, kAB, A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_1_send:
   [ St_I_1( A, ~id, kAB, B ), Fr( ~s ), Fr( ~x ) ]
  --[ Send( A, <'p', map(~s, 'p')^~x, senc(~s, h(kAB))> ) ]->
   [
   St_I_2( A, ~id, kAB, ~s, ~x, 'p', B ),
   Out( <'p', map(~s, 'p')^~x, senc(~s, h(kAB))> )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_1_receive:
   [ St_R_1( B, ~id, kAB, A ), In( <'p', X, senc(s, h(kAB))> ) ]
  --[ Recv( B, <'p', X, senc(s, h(kAB))> ) ]->
   [ St_R_2( B, ~id, kAB, s, X, 'p', A ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) R_2_send:
   [ St_R_2( B, ~id, kAB, s, X, 'p', A ), Fr( ~y ) ]
  --[ Send( B, map(s, 'p')^~y ) ]->
   [ St_R_3( B, ~id, kAB, s, X, ~y, 'p', A ), Out( map(s, 'p')^~y ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_2_receive:
   [ St_I_2( A, ~id, kAB, s, x, 'p', B ), In( Y ) ]
  --[ Recv( A, Y ) ]->
   [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) I_3_send:
   [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]
  --[
  Send( A, mac(map(s, 'p')^x, h(Y^x)) ),
  Running( A, B, <'R', 'I', map(s, 'p')^x, Y, h(Y^x)> )
  ]->
   [
   St_I_4( A, ~id, kAB, s, x, Y, 'p', B ),
   Out( mac(map(s, 'p')^x, h(Y^x)) )
   ]

  /*
  rule (modulo AC) I_3_send:
     [ St_I_3( A, ~id, kAB, s, x, Y, 'p', B ) ]
    --[
    Send( A, mac(z, h(z.1)) ),
    Running( A, B, <'R', 'I', z, Y, h(z.1)> )
    ]->
     [ St_I_4( A, ~id, kAB, s, x, Y, 'p', B ), Out( mac(z, h(z.1)) ) ]
    variants (modulo AC)
     1. Y     = Y.14
        s     = s.16
        x     = one
        z     = map(s.16, 'p')
        z.1   = Y.14
    
     2. Y     = Y.15
        s     = s.17
        x     = x.18
        z     = map(s.17, 'p')^x.18
        z.1   = Y.15^x.18
    
     3. Y     = z.20^inv(x.17)
        s     = s.16
        x     = x.17
        z     = map(s.16, 'p')^x.17
        z.1   = z.20
    
     4. Y     = z.31^x.47
        s     = s.27
        x     = inv(x.47)
        z     = map(s.27, 'p')^inv(x.47)
        z.1   = z.31
    
     5. Y     = z.32^(x.48*inv(x.49))
        s     = s.28
        x     = (x.49*inv(x.48))
        z     = map(s.28, 'p')^(x.49*inv(x.48))
        z.1   = z.32
    
     6. Y     = x.46^x.47
        s     = s.27
        x     = x.28
        z     = map(s.27, 'p')^x.28
        z.1   = x.46^(x.28*x.47)
    
     7. Y     = x.47^x.48
        s     = s.28
        x     = inv((x.48*x.49))
        z     = map(s.28, 'p')^inv((x.48*x.49))
        z.1   = x.47^inv(x.49)
    
     8. Y     = x.47^x.48
        s     = s.28
        x     = (x.49*inv(x.48))
        z     = map(s.28, 'p')^(x.49*inv(x.48))
        z.1   = x.47^x.49
    
     9. Y     = x.47^inv(x.48)
        s     = s.28
        x     = (x.48*x.49)
        z     = map(s.28, 'p')^(x.48*x.49)
        z.1   = x.47^x.49
    
    10. Y     = x.47^inv(x.49)
        s     = s.28
        x     = inv(x.48)
        z     = map(s.28, 'p')^inv(x.48)
        z.1   = x.47^inv((x.48*x.49))
    
    11. Y     = x.47^inv((x.29*x.49))
        s     = s.28
        x     = x.29
        z     = map(s.28, 'p')^x.29
        z.1   = x.47^inv(x.49)
    
    12. Y     = x.47^(x.48*x.49)
        s     = s.28
        x     = inv(x.48)
        z     = map(s.28, 'p')^inv(x.48)
        z.1   = x.47^x.49
    
    13. Y     = x.47^(x.49*inv(x.29))
        s     = s.28
        x     = x.29
        z     = map(s.28, 'p')^x.29
        z.1   = x.47^x.49
    
    14. Y     = x.48^x.49
        s     = s.29
        x     = (x.51*inv((x.49*x.50)))
        z     = map(s.29, 'p')^(x.51*inv((x.49*x.50)))
        z.1   = x.48^(x.51*inv(x.50))
    
    15. Y     = x.48^inv(x.49)
        s     = s.29
        x     = (x.51*inv(x.50))
        z     = map(s.29, 'p')^(x.51*inv(x.50))
        z.1   = x.48^(x.51*inv((x.49*x.50)))
    
    16. Y     = x.48^inv((x.49*x.50))
        s     = s.29
        x     = (x.50*x.51)
        z     = map(s.29, 'p')^(x.50*x.51)
        z.1   = x.48^(x.51*inv(x.49))
    
    17. Y     = x.48^inv((x.50*x.51))
        s     = s.29
        x     = (x.51*inv(x.49))
        z     = map(s.29, 'p')^(x.51*inv(x.49))
        z.1   = x.48^inv((x.49*x.50))
    
    18. Y     = x.48^(x.49*x.51)
        s     = s.29
        x     = (x.50*inv(x.49))
        z     = map(s.29, 'p')^(x.50*inv(x.49))
        z.1   = x.48^(x.50*x.51)
    
    19. Y     = x.48^(x.49*x.51*inv(x.50))
        s     = s.29
        x     = (x.50*inv(x.49))
        z     = map(s.29, 'p')^(x.50*inv(x.49))
        z.1   = x.48^x.51
    
    20. Y     = x.48^(x.49*inv(x.50))
        s     = s.29
        x     = (x.50*x.51*inv(x.49))
        z     = map(s.29, 'p')^(x.50*x.51*inv(x.49))
        z.1   = x.48^x.51
    
    21. Y     = x.48^(x.49*inv((x.50*x.51)))
        s     = s.29
        x     = (x.51*inv(x.49))
        z     = map(s.29, 'p')^(x.51*inv(x.49))
        z.1   = x.48^inv(x.50)
    
    22. Y     = x.48^(x.50*x.51)
        s     = s.29
        x     = inv((x.49*x.50))
        z     = map(s.29, 'p')^inv((x.49*x.50))
        z.1   = x.48^(x.51*inv(x.49))
    
    23. Y     = x.48^(x.51*inv(x.49))
        s     = s.29
        x     = inv((x.50*x.51))
        z     = map(s.29, 'p')^inv((x.50*x.51))
        z.1   = x.48^inv((x.49*x.50))
    
    24. Y     = x.48^(x.51*inv(x.49))
        s     = s.29
        x     = (x.49*x.50)
        z     = map(s.29, 'p')^(x.49*x.50)
        z.1   = x.48^(x.50*x.51)
    
    25. Y     = x.48^(x.51*inv(x.49))
        s     = s.29
        x     = (x.49*inv((x.50*x.51)))
        z     = map(s.29, 'p')^(x.49*inv((x.50*x.51)))
        z.1   = x.48^inv(x.50)
    
    26. Y     = x.48^(x.51*inv(x.50))
        s     = s.29
        x     = inv(x.49)
        z     = map(s.29, 'p')^inv(x.49)
        z.1   = x.48^(x.51*inv((x.49*x.50)))
    
    27. Y     = x.48^(x.51*inv((x.30*x.50)))
        s     = s.29
        x     = x.30
        z     = map(s.29, 'p')^x.30
        z.1   = x.48^(x.51*inv(x.50))
    
    28. Y     = x.49^inv((x.51*x.52))
        s     = s.30
        x     = (x.52*x.53*inv(x.50))
        z     = map(s.30, 'p')^(x.52*x.53*inv(x.50))
        z.1   = x.49^(x.53*inv((x.50*x.51)))
    
    29. Y     = x.49^(x.50*x.53*inv(x.51))
        s     = s.30
        x     = (x.51*x.52*inv(x.50))
        z     = map(s.30, 'p')^(x.51*x.52*inv(x.50))
        z.1   = x.49^(x.52*x.53)
    
    30. Y     = x.49^(x.50*x.53*inv((x.51*x.52)))
        s     = s.30
        x     = (x.52*inv(x.50))
        z     = map(s.30, 'p')^(x.52*inv(x.50))
        z.1   = x.49^(x.53*inv(x.51))
    
    31. Y     = x.49^(x.50*inv((x.51*x.52)))
        s     = s.30
        x     = (x.52*x.53*inv(x.50))
        z     = map(s.30, 'p')^(x.52*x.53*inv(x.50))
        z.1   = x.49^(x.53*inv(x.51))
    
    32. Y     = x.49^(x.51*x.53)
        s     = s.30
        x     = (x.52*inv((x.50*x.51)))
        z     = map(s.30, 'p')^(x.52*inv((x.50*x.51)))
        z.1   = x.49^(x.52*x.53*inv(x.50))
    
    33. Y     = x.49^(x.51*inv((x.52*x.53)))
        s     = s.30
        x     = (x.53*inv((x.50*x.51)))
        z     = map(s.30, 'p')^(x.53*inv((x.50*x.51)))
        z.1   = x.49^inv((x.50*x.52))
    
    34. Y     = x.49^(x.52*x.53*inv(x.50))
        s     = s.30
        x     = inv((x.51*x.52))
        z     = map(s.30, 'p')^inv((x.51*x.52))
        z.1   = x.49^(x.53*inv((x.50*x.51)))
    
    35. Y     = x.49^(x.52*x.53*inv(x.50))
        s     = s.30
        x     = (x.50*inv((x.51*x.52)))
        z     = map(s.30, 'p')^(x.50*inv((x.51*x.52)))
        z.1   = x.49^(x.53*inv(x.51))
    
    36. Y     = x.49^(x.52*inv(x.50))
        s     = s.30
        x     = (x.50*x.53*inv((x.51*x.52)))
        z     = map(s.30, 'p')^(x.50*x.53*inv((x.51*x.52)))
        z.1   = x.49^(x.53*inv(x.51))
    
    37. Y     = x.49^(x.52*inv(x.50))
        s     = s.30
        x     = (x.53*inv((x.51*x.52)))
        z     = map(s.30, 'p')^(x.53*inv((x.51*x.52)))
        z.1   = x.49^(x.53*inv((x.50*x.51)))
    
    38. Y     = x.49^(x.53*inv(x.51))
        s     = s.30
        x     = (x.52*inv(x.50))
        z     = map(s.30, 'p')^(x.52*inv(x.50))
        z.1   = x.49^(x.52*x.53*inv((x.50*x.51)))
    
    39. Y     = x.49^(x.53*inv((x.50*x.51)))
        s     = s.30
        x     = (x.51*x.52)
        z     = map(s.30, 'p')^(x.51*x.52)
        z.1   = x.49^(x.52*x.53*inv(x.50))
    
    40. Y     = x.49^(x.53*inv((x.51*x.52)))
        s     = s.30
        x     = (x.52*inv(x.50))
        z     = map(s.30, 'p')^(x.52*inv(x.50))
        z.1   = x.49^(x.53*inv((x.50*x.51)))
    
    41. Y     = x.50^(x.51*x.55*inv((x.52*x.53)))
        s     = s.31
        x     = (x.53*x.54*inv(x.51))
        z     = map(s.31, 'p')^(x.53*x.54*inv(x.51))
        z.1   = x.50^(x.54*x.55*inv(x.52))
    
    42. Y     = x.50^(x.52*x.55*inv((x.53*x.54)))
        s     = s.31
        x     = (x.54*inv((x.51*x.52)))
        z     = map(s.31, 'p')^(x.54*inv((x.51*x.52)))
        z.1   = x.50^(x.55*inv((x.51*x.53)))
    
    43. Y     = x.50^(x.52*inv((x.53*x.54)))
        s     = s.31
        x     = (x.54*x.55*inv((x.51*x.52)))
        z     = map(s.31, 'p')^(x.54*x.55*inv((x.51*x.52)))
        z.1   = x.50^(x.55*inv((x.51*x.53)))
    
    44. Y     = x.50^(x.53*x.55*inv(x.51))
        s     = s.31
        x     = (x.51*x.54*inv((x.52*x.53)))
        z     = map(s.31, 'p')^(x.51*x.54*inv((x.52*x.53)))
        z.1   = x.50^(x.54*x.55*inv(x.52))
    
    45. Y     = x.50^(x.53*x.55*inv(x.51))
        s     = s.31
        x     = (x.54*inv((x.52*x.53)))
        z     = map(s.31, 'p')^(x.54*inv((x.52*x.53)))
        z.1   = x.50^(x.54*x.55*inv((x.51*x.52)))
    
    46. Y     = x.50^(x.55*inv((x.52*x.53)))
        s     = s.31
        x     = (x.53*x.54*inv(x.51))
        z     = map(s.31, 'p')^(x.53*x.54*inv(x.51))
        z.1   = x.50^(x.54*x.55*inv((x.51*x.52)))
    
    47. Y     = x.51^(x.53*x.57*inv((x.54*x.55)))
        s     = s.32
        x     = (x.55*x.56*inv((x.52*x.53)))
        z     = map(s.32, 'p')^(x.55*x.56*inv((x.52*x.53)))
        z.1   = x.51^(x.56*x.57*inv((x.52*x.54)))
  */

rule (modulo E) R_3_receive:
   [ St_R_3( B, ~id, kAB, s, X, y, 'p', A ), In( mac(X, h(X^y)) ) ]
  --[
  Recv( B, mac(X, h(X^y)) ),
  Running( B, A, <'I', 'R', X, map(s, 'p')^y, h(X^y)> ),
  Commit( B, A, <'R', 'I', X, map(s, 'p')^y, h(X^y)> ), Honest( A ),
  Honest( B ), Secret( B, h(X^y) )
  ]->
   [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]

  /*
  rule (modulo AC) R_3_receive:
     [ St_R_3( B, ~id, kAB, s, X, y, 'p', A ), In( mac(X, h(z)) ) ]
    --[
    Recv( B, mac(X, h(z)) ), Running( B, A, <'I', 'R', X, z.1, h(z)> ),
    Commit( B, A, <'R', 'I', X, z.1, h(z)> ), Honest( A ), Honest( B ),
    Secret( B, h(z) )
    ]->
     [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
    variants (modulo AC)
     1. X     = X.16
        s     = s.18
        y     = one
        z     = X.16
        z.1   = map(s.18, 'p')
    
     2. X     = X.17
        s     = s.19
        y     = y.20
        z     = X.17^y.20
        z.1   = map(s.19, 'p')^y.20
    
     3. X     = z.20^inv(y.18)
        s     = s.17
        y     = y.18
        z     = z.20
        z.1   = map(s.17, 'p')^y.18
    
     4. X     = z.32^x.51
        s     = s.29
        y     = inv(x.51)
        z     = z.32
        z.1   = map(s.29, 'p')^inv(x.51)
    
     5. X     = z.33^(x.52*inv(x.53))
        s     = s.30
        y     = (x.53*inv(x.52))
        z     = z.33
        z.1   = map(s.30, 'p')^(x.53*inv(x.52))
    
     6. X     = x.50^x.51
        s     = s.29
        y     = y.30
        z     = x.50^(y.30*x.51)
        z.1   = map(s.29, 'p')^y.30
    
     7. X     = x.51^x.52
        s     = s.30
        y     = inv((x.52*x.53))
        z     = x.51^inv(x.53)
        z.1   = map(s.30, 'p')^inv((x.52*x.53))
    
     8. X     = x.51^x.52
        s     = s.30
        y     = (x.53*inv(x.52))
        z     = x.51^x.53
        z.1   = map(s.30, 'p')^(x.53*inv(x.52))
    
     9. X     = x.51^inv(x.52)
        s     = s.30
        y     = (x.52*x.53)
        z     = x.51^x.53
        z.1   = map(s.30, 'p')^(x.52*x.53)
    
    10. X     = x.51^inv(x.53)
        s     = s.30
        y     = inv(x.52)
        z     = x.51^inv((x.52*x.53))
        z.1   = map(s.30, 'p')^inv(x.52)
    
    11. X     = x.51^inv((y.31*x.53))
        s     = s.30
        y     = y.31
        z     = x.51^inv(x.53)
        z.1   = map(s.30, 'p')^y.31
    
    12. X     = x.51^(x.52*x.53)
        s     = s.30
        y     = inv(x.52)
        z     = x.51^x.53
        z.1   = map(s.30, 'p')^inv(x.52)
    
    13. X     = x.51^(x.53*inv(y.31))
        s     = s.30
        y     = y.31
        z     = x.51^x.53
        z.1   = map(s.30, 'p')^y.31
    
    14. X     = x.52^x.53
        s     = s.31
        y     = (x.55*inv((x.53*x.54)))
        z     = x.52^(x.55*inv(x.54))
        z.1   = map(s.31, 'p')^(x.55*inv((x.53*x.54)))
    
    15. X     = x.52^inv(x.53)
        s     = s.31
        y     = (x.55*inv(x.54))
        z     = x.52^(x.55*inv((x.53*x.54)))
        z.1   = map(s.31, 'p')^(x.55*inv(x.54))
    
    16. X     = x.52^inv((x.53*x.54))
        s     = s.31
        y     = (x.54*x.55)
        z     = x.52^(x.55*inv(x.53))
        z.1   = map(s.31, 'p')^(x.54*x.55)
    
    17. X     = x.52^inv((x.54*x.55))
        s     = s.31
        y     = (x.55*inv(x.53))
        z     = x.52^inv((x.53*x.54))
        z.1   = map(s.31, 'p')^(x.55*inv(x.53))
    
    18. X     = x.52^(x.53*x.55)
        s     = s.31
        y     = (x.54*inv(x.53))
        z     = x.52^(x.54*x.55)
        z.1   = map(s.31, 'p')^(x.54*inv(x.53))
    
    19. X     = x.52^(x.53*x.55*inv(x.54))
        s     = s.31
        y     = (x.54*inv(x.53))
        z     = x.52^x.55
        z.1   = map(s.31, 'p')^(x.54*inv(x.53))
    
    20. X     = x.52^(x.53*inv(x.54))
        s     = s.31
        y     = (x.54*x.55*inv(x.53))
        z     = x.52^x.55
        z.1   = map(s.31, 'p')^(x.54*x.55*inv(x.53))
    
    21. X     = x.52^(x.53*inv((x.54*x.55)))
        s     = s.31
        y     = (x.55*inv(x.53))
        z     = x.52^inv(x.54)
        z.1   = map(s.31, 'p')^(x.55*inv(x.53))
    
    22. X     = x.52^(x.54*x.55)
        s     = s.31
        y     = inv((x.53*x.54))
        z     = x.52^(x.55*inv(x.53))
        z.1   = map(s.31, 'p')^inv((x.53*x.54))
    
    23. X     = x.52^(x.55*inv(x.53))
        s     = s.31
        y     = inv((x.54*x.55))
        z     = x.52^inv((x.53*x.54))
        z.1   = map(s.31, 'p')^inv((x.54*x.55))
    
    24. X     = x.52^(x.55*inv(x.53))
        s     = s.31
        y     = (x.53*x.54)
        z     = x.52^(x.54*x.55)
        z.1   = map(s.31, 'p')^(x.53*x.54)
    
    25. X     = x.52^(x.55*inv(x.53))
        s     = s.31
        y     = (x.53*inv((x.54*x.55)))
        z     = x.52^inv(x.54)
        z.1   = map(s.31, 'p')^(x.53*inv((x.54*x.55)))
    
    26. X     = x.52^(x.55*inv(x.54))
        s     = s.31
        y     = inv(x.53)
        z     = x.52^(x.55*inv((x.53*x.54)))
        z.1   = map(s.31, 'p')^inv(x.53)
    
    27. X     = x.52^(x.55*inv((y.32*x.54)))
        s     = s.31
        y     = y.32
        z     = x.52^(x.55*inv(x.54))
        z.1   = map(s.31, 'p')^y.32
    
    28. X     = x.53^inv((x.55*x.56))
        s     = s.32
        y     = (x.56*x.57*inv(x.54))
        z     = x.53^(x.57*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^(x.56*x.57*inv(x.54))
    
    29. X     = x.53^(x.54*x.57*inv(x.55))
        s     = s.32
        y     = (x.55*x.56*inv(x.54))
        z     = x.53^(x.56*x.57)
        z.1   = map(s.32, 'p')^(x.55*x.56*inv(x.54))
    
    30. X     = x.53^(x.54*x.57*inv((x.55*x.56)))
        s     = s.32
        y     = (x.56*inv(x.54))
        z     = x.53^(x.57*inv(x.55))
        z.1   = map(s.32, 'p')^(x.56*inv(x.54))
    
    31. X     = x.53^(x.54*inv((x.55*x.56)))
        s     = s.32
        y     = (x.56*x.57*inv(x.54))
        z     = x.53^(x.57*inv(x.55))
        z.1   = map(s.32, 'p')^(x.56*x.57*inv(x.54))
    
    32. X     = x.53^(x.55*x.57)
        s     = s.32
        y     = (x.56*inv((x.54*x.55)))
        z     = x.53^(x.56*x.57*inv(x.54))
        z.1   = map(s.32, 'p')^(x.56*inv((x.54*x.55)))
    
    33. X     = x.53^(x.55*inv((x.56*x.57)))
        s     = s.32
        y     = (x.57*inv((x.54*x.55)))
        z     = x.53^inv((x.54*x.56))
        z.1   = map(s.32, 'p')^(x.57*inv((x.54*x.55)))
    
    34. X     = x.53^(x.56*x.57*inv(x.54))
        s     = s.32
        y     = inv((x.55*x.56))
        z     = x.53^(x.57*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^inv((x.55*x.56))
    
    35. X     = x.53^(x.56*x.57*inv(x.54))
        s     = s.32
        y     = (x.54*inv((x.55*x.56)))
        z     = x.53^(x.57*inv(x.55))
        z.1   = map(s.32, 'p')^(x.54*inv((x.55*x.56)))
    
    36. X     = x.53^(x.56*inv(x.54))
        s     = s.32
        y     = (x.54*x.57*inv((x.55*x.56)))
        z     = x.53^(x.57*inv(x.55))
        z.1   = map(s.32, 'p')^(x.54*x.57*inv((x.55*x.56)))
    
    37. X     = x.53^(x.56*inv(x.54))
        s     = s.32
        y     = (x.57*inv((x.55*x.56)))
        z     = x.53^(x.57*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^(x.57*inv((x.55*x.56)))
    
    38. X     = x.53^(x.57*inv(x.55))
        s     = s.32
        y     = (x.56*inv(x.54))
        z     = x.53^(x.56*x.57*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^(x.56*inv(x.54))
    
    39. X     = x.53^(x.57*inv((x.54*x.55)))
        s     = s.32
        y     = (x.55*x.56)
        z     = x.53^(x.56*x.57*inv(x.54))
        z.1   = map(s.32, 'p')^(x.55*x.56)
    
    40. X     = x.53^(x.57*inv((x.55*x.56)))
        s     = s.32
        y     = (x.56*inv(x.54))
        z     = x.53^(x.57*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^(x.56*inv(x.54))
    
    41. X     = x.54^(x.55*x.59*inv((x.56*x.57)))
        s     = s.33
        y     = (x.57*x.58*inv(x.55))
        z     = x.54^(x.58*x.59*inv(x.56))
        z.1   = map(s.33, 'p')^(x.57*x.58*inv(x.55))
    
    42. X     = x.54^(x.56*x.59*inv((x.57*x.58)))
        s     = s.33
        y     = (x.58*inv((x.55*x.56)))
        z     = x.54^(x.59*inv((x.55*x.57)))
        z.1   = map(s.33, 'p')^(x.58*inv((x.55*x.56)))
    
    43. X     = x.54^(x.56*inv((x.57*x.58)))
        s     = s.33
        y     = (x.58*x.59*inv((x.55*x.56)))
        z     = x.54^(x.59*inv((x.55*x.57)))
        z.1   = map(s.33, 'p')^(x.58*x.59*inv((x.55*x.56)))
    
    44. X     = x.54^(x.57*x.59*inv(x.55))
        s     = s.33
        y     = (x.55*x.58*inv((x.56*x.57)))
        z     = x.54^(x.58*x.59*inv(x.56))
        z.1   = map(s.33, 'p')^(x.55*x.58*inv((x.56*x.57)))
    
    45. X     = x.54^(x.57*x.59*inv(x.55))
        s     = s.33
        y     = (x.58*inv((x.56*x.57)))
        z     = x.54^(x.58*x.59*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.58*inv((x.56*x.57)))
    
    46. X     = x.54^(x.59*inv((x.56*x.57)))
        s     = s.33
        y     = (x.57*x.58*inv(x.55))
        z     = x.54^(x.58*x.59*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.57*x.58*inv(x.55))
    
    47. X     = x.55^(x.57*x.61*inv((x.58*x.59)))
        s     = s.34
        y     = (x.59*x.60*inv((x.56*x.57)))
        z     = x.55^(x.60*x.61*inv((x.56*x.58)))
        z.1   = map(s.34, 'p')^(x.59*x.60*inv((x.56*x.57)))
  */

rule (modulo E) R_4_send:
   [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
  --[ Send( B, mac(map(s, 'p')^y, h(X^y)) ) ]->
   [
   St_R_5( B, ~id, kAB, s, X, y, 'p', A ),
   Out( mac(map(s, 'p')^y, h(X^y)) )
   ]

  /*
  rule (modulo AC) R_4_send:
     [ St_R_4( B, ~id, kAB, s, X, y, 'p', A ) ]
    --[ Send( B, mac(z, h(z.1)) ) ]->
     [ St_R_5( B, ~id, kAB, s, X, y, 'p', A ), Out( mac(z, h(z.1)) ) ]
    variants (modulo AC)
     1. X     = X.12
        s     = s.14
        y     = y.15
        z     = map(s.14, 'p')^y.15
        z.1   = X.12^y.15
    
     2. X     = X.12
        s     = s.14
        y     = one
        z     = map(s.14, 'p')
        z.1   = X.12
    
     3. X     = z.18^x.20
        s     = s.14
        y     = inv(x.20)
        z     = map(s.14, 'p')^inv(x.20)
        z.1   = z.18
    
     4. X     = z.18^inv(y.15)
        s     = s.14
        y     = y.15
        z     = map(s.14, 'p')^y.15
        z.1   = z.18
    
     5. X     = x.19^x.20
        s     = s.14
        y     = y.15
        z     = map(s.14, 'p')^y.15
        z.1   = x.19^(y.15*x.20)
    
     6. X     = z.19^(x.21*inv(x.22))
        s     = s.15
        y     = (x.22*inv(x.21))
        z     = map(s.15, 'p')^(x.22*inv(x.21))
        z.1   = z.19
    
     7. X     = x.20^x.21
        s     = s.15
        y     = inv((x.21*x.22))
        z     = map(s.15, 'p')^inv((x.21*x.22))
        z.1   = x.20^inv(x.22)
    
     8. X     = x.20^x.21
        s     = s.15
        y     = (x.22*inv(x.21))
        z     = map(s.15, 'p')^(x.22*inv(x.21))
        z.1   = x.20^x.22
    
     9. X     = x.20^inv(x.21)
        s     = s.15
        y     = (x.21*x.22)
        z     = map(s.15, 'p')^(x.21*x.22)
        z.1   = x.20^x.22
    
    10. X     = x.20^inv(x.22)
        s     = s.15
        y     = inv(x.21)
        z     = map(s.15, 'p')^inv(x.21)
        z.1   = x.20^inv((x.21*x.22))
    
    11. X     = x.20^inv((y.16*x.22))
        s     = s.15
        y     = y.16
        z     = map(s.15, 'p')^y.16
        z.1   = x.20^inv(x.22)
    
    12. X     = x.20^(x.21*x.22)
        s     = s.15
        y     = inv(x.21)
        z     = map(s.15, 'p')^inv(x.21)
        z.1   = x.20^x.22
    
    13. X     = x.20^(x.22*inv(y.16))
        s     = s.15
        y     = y.16
        z     = map(s.15, 'p')^y.16
        z.1   = x.20^x.22
    
    14. X     = x.21^x.22
        s     = s.16
        y     = (x.24*inv((x.22*x.23)))
        z     = map(s.16, 'p')^(x.24*inv((x.22*x.23)))
        z.1   = x.21^(x.24*inv(x.23))
    
    15. X     = x.21^inv(x.22)
        s     = s.16
        y     = (x.24*inv(x.23))
        z     = map(s.16, 'p')^(x.24*inv(x.23))
        z.1   = x.21^(x.24*inv((x.22*x.23)))
    
    16. X     = x.21^inv((x.22*x.23))
        s     = s.16
        y     = (x.23*x.24)
        z     = map(s.16, 'p')^(x.23*x.24)
        z.1   = x.21^(x.24*inv(x.22))
    
    17. X     = x.21^inv((x.23*x.24))
        s     = s.16
        y     = (x.24*inv(x.22))
        z     = map(s.16, 'p')^(x.24*inv(x.22))
        z.1   = x.21^inv((x.22*x.23))
    
    18. X     = x.21^(x.22*x.24)
        s     = s.16
        y     = (x.23*inv(x.22))
        z     = map(s.16, 'p')^(x.23*inv(x.22))
        z.1   = x.21^(x.23*x.24)
    
    19. X     = x.21^(x.22*x.24*inv(x.23))
        s     = s.16
        y     = (x.23*inv(x.22))
        z     = map(s.16, 'p')^(x.23*inv(x.22))
        z.1   = x.21^x.24
    
    20. X     = x.21^(x.22*inv(x.23))
        s     = s.16
        y     = (x.23*x.24*inv(x.22))
        z     = map(s.16, 'p')^(x.23*x.24*inv(x.22))
        z.1   = x.21^x.24
    
    21. X     = x.21^(x.22*inv((x.23*x.24)))
        s     = s.16
        y     = (x.24*inv(x.22))
        z     = map(s.16, 'p')^(x.24*inv(x.22))
        z.1   = x.21^inv(x.23)
    
    22. X     = x.21^(x.23*x.24)
        s     = s.16
        y     = inv((x.22*x.23))
        z     = map(s.16, 'p')^inv((x.22*x.23))
        z.1   = x.21^(x.24*inv(x.22))
    
    23. X     = x.21^(x.24*inv(x.22))
        s     = s.16
        y     = inv((x.23*x.24))
        z     = map(s.16, 'p')^inv((x.23*x.24))
        z.1   = x.21^inv((x.22*x.23))
    
    24. X     = x.21^(x.24*inv(x.22))
        s     = s.16
        y     = (x.22*x.23)
        z     = map(s.16, 'p')^(x.22*x.23)
        z.1   = x.21^(x.23*x.24)
    
    25. X     = x.21^(x.24*inv(x.22))
        s     = s.16
        y     = (x.22*inv((x.23*x.24)))
        z     = map(s.16, 'p')^(x.22*inv((x.23*x.24)))
        z.1   = x.21^inv(x.23)
    
    26. X     = x.21^(x.24*inv(x.23))
        s     = s.16
        y     = inv(x.22)
        z     = map(s.16, 'p')^inv(x.22)
        z.1   = x.21^(x.24*inv((x.22*x.23)))
    
    27. X     = x.21^(x.24*inv((y.17*x.23)))
        s     = s.16
        y     = y.17
        z     = map(s.16, 'p')^y.17
        z.1   = x.21^(x.24*inv(x.23))
    
    28. X     = x.22^inv((x.24*x.25))
        s     = s.17
        y     = (x.25*x.26*inv(x.23))
        z     = map(s.17, 'p')^(x.25*x.26*inv(x.23))
        z.1   = x.22^(x.26*inv((x.23*x.24)))
    
    29. X     = x.22^(x.23*x.26*inv(x.24))
        s     = s.17
        y     = (x.24*x.25*inv(x.23))
        z     = map(s.17, 'p')^(x.24*x.25*inv(x.23))
        z.1   = x.22^(x.25*x.26)
    
    30. X     = x.22^(x.23*x.26*inv((x.24*x.25)))
        s     = s.17
        y     = (x.25*inv(x.23))
        z     = map(s.17, 'p')^(x.25*inv(x.23))
        z.1   = x.22^(x.26*inv(x.24))
    
    31. X     = x.22^(x.23*inv((x.24*x.25)))
        s     = s.17
        y     = (x.25*x.26*inv(x.23))
        z     = map(s.17, 'p')^(x.25*x.26*inv(x.23))
        z.1   = x.22^(x.26*inv(x.24))
    
    32. X     = x.22^(x.24*x.26)
        s     = s.17
        y     = (x.25*inv((x.23*x.24)))
        z     = map(s.17, 'p')^(x.25*inv((x.23*x.24)))
        z.1   = x.22^(x.25*x.26*inv(x.23))
    
    33. X     = x.22^(x.24*inv((x.25*x.26)))
        s     = s.17
        y     = (x.26*inv((x.23*x.24)))
        z     = map(s.17, 'p')^(x.26*inv((x.23*x.24)))
        z.1   = x.22^inv((x.23*x.25))
    
    34. X     = x.22^(x.25*x.26*inv(x.23))
        s     = s.17
        y     = inv((x.24*x.25))
        z     = map(s.17, 'p')^inv((x.24*x.25))
        z.1   = x.22^(x.26*inv((x.23*x.24)))
    
    35. X     = x.22^(x.25*x.26*inv(x.23))
        s     = s.17
        y     = (x.23*inv((x.24*x.25)))
        z     = map(s.17, 'p')^(x.23*inv((x.24*x.25)))
        z.1   = x.22^(x.26*inv(x.24))
    
    36. X     = x.22^(x.25*inv(x.23))
        s     = s.17
        y     = (x.23*x.26*inv((x.24*x.25)))
        z     = map(s.17, 'p')^(x.23*x.26*inv((x.24*x.25)))
        z.1   = x.22^(x.26*inv(x.24))
    
    37. X     = x.22^(x.25*inv(x.23))
        s     = s.17
        y     = (x.26*inv((x.24*x.25)))
        z     = map(s.17, 'p')^(x.26*inv((x.24*x.25)))
        z.1   = x.22^(x.26*inv((x.23*x.24)))
    
    38. X     = x.22^(x.26*inv(x.24))
        s     = s.17
        y     = (x.25*inv(x.23))
        z     = map(s.17, 'p')^(x.25*inv(x.23))
        z.1   = x.22^(x.25*x.26*inv((x.23*x.24)))
    
    39. X     = x.22^(x.26*inv((x.23*x.24)))
        s     = s.17
        y     = (x.24*x.25)
        z     = map(s.17, 'p')^(x.24*x.25)
        z.1   = x.22^(x.25*x.26*inv(x.23))
    
    40. X     = x.22^(x.26*inv((x.24*x.25)))
        s     = s.17
        y     = (x.25*inv(x.23))
        z     = map(s.17, 'p')^(x.25*inv(x.23))
        z.1   = x.22^(x.26*inv((x.23*x.24)))
    
    41. X     = x.23^(x.24*x.28*inv((x.25*x.26)))
        s     = s.18
        y     = (x.26*x.27*inv(x.24))
        z     = map(s.18, 'p')^(x.26*x.27*inv(x.24))
        z.1   = x.23^(x.27*x.28*inv(x.25))
    
    42. X     = x.23^(x.25*x.28*inv((x.26*x.27)))
        s     = s.18
        y     = (x.27*inv((x.24*x.25)))
        z     = map(s.18, 'p')^(x.27*inv((x.24*x.25)))
        z.1   = x.23^(x.28*inv((x.24*x.26)))
    
    43. X     = x.23^(x.25*inv((x.26*x.27)))
        s     = s.18
        y     = (x.27*x.28*inv((x.24*x.25)))
        z     = map(s.18, 'p')^(x.27*x.28*inv((x.24*x.25)))
        z.1   = x.23^(x.28*inv((x.24*x.26)))
    
    44. X     = x.23^(x.26*x.28*inv(x.24))
        s     = s.18
        y     = (x.24*x.27*inv((x.25*x.26)))
        z     = map(s.18, 'p')^(x.24*x.27*inv((x.25*x.26)))
        z.1   = x.23^(x.27*x.28*inv(x.25))
    
    45. X     = x.23^(x.26*x.28*inv(x.24))
        s     = s.18
        y     = (x.27*inv((x.25*x.26)))
        z     = map(s.18, 'p')^(x.27*inv((x.25*x.26)))
        z.1   = x.23^(x.27*x.28*inv((x.24*x.25)))
    
    46. X     = x.23^(x.28*inv((x.25*x.26)))
        s     = s.18
        y     = (x.26*x.27*inv(x.24))
        z     = map(s.18, 'p')^(x.26*x.27*inv(x.24))
        z.1   = x.23^(x.27*x.28*inv((x.24*x.25)))
    
    47. X     = x.24^(x.26*x.30*inv((x.27*x.28)))
        s     = s.19
        y     = (x.28*x.29*inv((x.25*x.26)))
        z     = map(s.19, 'p')^(x.28*x.29*inv((x.25*x.26)))
        z.1   = x.24^(x.29*x.30*inv((x.25*x.27)))
  */

rule (modulo E) I_4_receive:
   [ St_I_4( A, ~id, kAB, s, x, Y, 'p', B ), In( mac(Z, h(Y^x)) ) ]
  --[
  Recv( A, mac(Z, h(Y^x)) ), Finish( ),
  Commit( A, B, <'I', 'R', map(s, 'p')^x, Y, h(Y^x)> ),
  Secret( A, h(Y^x) ), Honest( A ), Honest( B ),
  Differ( Z, map(s, 'p')^x )
  ]->
   [ St_I_5( A, ~id, kAB, s, x, Y, 'p', B ) ]

  /*
  rule (modulo AC) I_4_receive:
     [ St_I_4( A, ~id, kAB, s, x, Y, 'p', B ), In( mac(Z, h(z)) ) ]
    --[
    Recv( A, mac(Z, h(z)) ), Finish( ),
    Commit( A, B, <'I', 'R', z.1, Y, h(z)> ), Secret( A, h(z) ),
    Honest( A ), Honest( B ), Differ( Z, z.1 )
    ]->
     [ St_I_5( A, ~id, kAB, s, x, Y, 'p', B ) ]
    variants (modulo AC)
     1. Y     = Y.18
        s     = s.21
        x     = one
        z     = Y.18
        z.1   = map(s.21, 'p')
    
     2. Y     = Y.19
        s     = s.22
        x     = x.23
        z     = Y.19^x.23
        z.1   = map(s.22, 'p')^x.23
    
     3. Y     = z.21^inv(x.19)
        s     = s.18
        x     = x.19
        z     = z.21
        z.1   = map(s.18, 'p')^x.19
    
     4. Y     = z.33^x.52
        s     = s.30
        x     = inv(x.52)
        z     = z.33
        z.1   = map(s.30, 'p')^inv(x.52)
    
     5. Y     = z.34^(x.53*inv(x.54))
        s     = s.31
        x     = (x.54*inv(x.53))
        z     = z.34
        z.1   = map(s.31, 'p')^(x.54*inv(x.53))
    
     6. Y     = x.51^x.52
        s     = s.30
        x     = x.31
        z     = x.51^(x.31*x.52)
        z.1   = map(s.30, 'p')^x.31
    
     7. Y     = x.52^x.53
        s     = s.31
        x     = inv((x.53*x.54))
        z     = x.52^inv(x.54)
        z.1   = map(s.31, 'p')^inv((x.53*x.54))
    
     8. Y     = x.52^x.53
        s     = s.31
        x     = (x.54*inv(x.53))
        z     = x.52^x.54
        z.1   = map(s.31, 'p')^(x.54*inv(x.53))
    
     9. Y     = x.52^inv(x.53)
        s     = s.31
        x     = (x.53*x.54)
        z     = x.52^x.54
        z.1   = map(s.31, 'p')^(x.53*x.54)
    
    10. Y     = x.52^inv(x.54)
        s     = s.31
        x     = inv(x.53)
        z     = x.52^inv((x.53*x.54))
        z.1   = map(s.31, 'p')^inv(x.53)
    
    11. Y     = x.52^inv((x.32*x.54))
        s     = s.31
        x     = x.32
        z     = x.52^inv(x.54)
        z.1   = map(s.31, 'p')^x.32
    
    12. Y     = x.52^(x.53*x.54)
        s     = s.31
        x     = inv(x.53)
        z     = x.52^x.54
        z.1   = map(s.31, 'p')^inv(x.53)
    
    13. Y     = x.52^(x.54*inv(x.32))
        s     = s.31
        x     = x.32
        z     = x.52^x.54
        z.1   = map(s.31, 'p')^x.32
    
    14. Y     = x.53^x.54
        s     = s.32
        x     = (x.56*inv((x.54*x.55)))
        z     = x.53^(x.56*inv(x.55))
        z.1   = map(s.32, 'p')^(x.56*inv((x.54*x.55)))
    
    15. Y     = x.53^inv(x.54)
        s     = s.32
        x     = (x.56*inv(x.55))
        z     = x.53^(x.56*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^(x.56*inv(x.55))
    
    16. Y     = x.53^inv((x.54*x.55))
        s     = s.32
        x     = (x.55*x.56)
        z     = x.53^(x.56*inv(x.54))
        z.1   = map(s.32, 'p')^(x.55*x.56)
    
    17. Y     = x.53^inv((x.55*x.56))
        s     = s.32
        x     = (x.56*inv(x.54))
        z     = x.53^inv((x.54*x.55))
        z.1   = map(s.32, 'p')^(x.56*inv(x.54))
    
    18. Y     = x.53^(x.54*x.56)
        s     = s.32
        x     = (x.55*inv(x.54))
        z     = x.53^(x.55*x.56)
        z.1   = map(s.32, 'p')^(x.55*inv(x.54))
    
    19. Y     = x.53^(x.54*x.56*inv(x.55))
        s     = s.32
        x     = (x.55*inv(x.54))
        z     = x.53^x.56
        z.1   = map(s.32, 'p')^(x.55*inv(x.54))
    
    20. Y     = x.53^(x.54*inv(x.55))
        s     = s.32
        x     = (x.55*x.56*inv(x.54))
        z     = x.53^x.56
        z.1   = map(s.32, 'p')^(x.55*x.56*inv(x.54))
    
    21. Y     = x.53^(x.54*inv((x.55*x.56)))
        s     = s.32
        x     = (x.56*inv(x.54))
        z     = x.53^inv(x.55)
        z.1   = map(s.32, 'p')^(x.56*inv(x.54))
    
    22. Y     = x.53^(x.55*x.56)
        s     = s.32
        x     = inv((x.54*x.55))
        z     = x.53^(x.56*inv(x.54))
        z.1   = map(s.32, 'p')^inv((x.54*x.55))
    
    23. Y     = x.53^(x.56*inv(x.54))
        s     = s.32
        x     = inv((x.55*x.56))
        z     = x.53^inv((x.54*x.55))
        z.1   = map(s.32, 'p')^inv((x.55*x.56))
    
    24. Y     = x.53^(x.56*inv(x.54))
        s     = s.32
        x     = (x.54*x.55)
        z     = x.53^(x.55*x.56)
        z.1   = map(s.32, 'p')^(x.54*x.55)
    
    25. Y     = x.53^(x.56*inv(x.54))
        s     = s.32
        x     = (x.54*inv((x.55*x.56)))
        z     = x.53^inv(x.55)
        z.1   = map(s.32, 'p')^(x.54*inv((x.55*x.56)))
    
    26. Y     = x.53^(x.56*inv(x.55))
        s     = s.32
        x     = inv(x.54)
        z     = x.53^(x.56*inv((x.54*x.55)))
        z.1   = map(s.32, 'p')^inv(x.54)
    
    27. Y     = x.53^(x.56*inv((x.33*x.55)))
        s     = s.32
        x     = x.33
        z     = x.53^(x.56*inv(x.55))
        z.1   = map(s.32, 'p')^x.33
    
    28. Y     = x.54^inv((x.56*x.57))
        s     = s.33
        x     = (x.57*x.58*inv(x.55))
        z     = x.54^(x.58*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.57*x.58*inv(x.55))
    
    29. Y     = x.54^(x.55*x.58*inv(x.56))
        s     = s.33
        x     = (x.56*x.57*inv(x.55))
        z     = x.54^(x.57*x.58)
        z.1   = map(s.33, 'p')^(x.56*x.57*inv(x.55))
    
    30. Y     = x.54^(x.55*x.58*inv((x.56*x.57)))
        s     = s.33
        x     = (x.57*inv(x.55))
        z     = x.54^(x.58*inv(x.56))
        z.1   = map(s.33, 'p')^(x.57*inv(x.55))
    
    31. Y     = x.54^(x.55*inv((x.56*x.57)))
        s     = s.33
        x     = (x.57*x.58*inv(x.55))
        z     = x.54^(x.58*inv(x.56))
        z.1   = map(s.33, 'p')^(x.57*x.58*inv(x.55))
    
    32. Y     = x.54^(x.56*x.58)
        s     = s.33
        x     = (x.57*inv((x.55*x.56)))
        z     = x.54^(x.57*x.58*inv(x.55))
        z.1   = map(s.33, 'p')^(x.57*inv((x.55*x.56)))
    
    33. Y     = x.54^(x.56*inv((x.57*x.58)))
        s     = s.33
        x     = (x.58*inv((x.55*x.56)))
        z     = x.54^inv((x.55*x.57))
        z.1   = map(s.33, 'p')^(x.58*inv((x.55*x.56)))
    
    34. Y     = x.54^(x.57*x.58*inv(x.55))
        s     = s.33
        x     = inv((x.56*x.57))
        z     = x.54^(x.58*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^inv((x.56*x.57))
    
    35. Y     = x.54^(x.57*x.58*inv(x.55))
        s     = s.33
        x     = (x.55*inv((x.56*x.57)))
        z     = x.54^(x.58*inv(x.56))
        z.1   = map(s.33, 'p')^(x.55*inv((x.56*x.57)))
    
    36. Y     = x.54^(x.57*inv(x.55))
        s     = s.33
        x     = (x.55*x.58*inv((x.56*x.57)))
        z     = x.54^(x.58*inv(x.56))
        z.1   = map(s.33, 'p')^(x.55*x.58*inv((x.56*x.57)))
    
    37. Y     = x.54^(x.57*inv(x.55))
        s     = s.33
        x     = (x.58*inv((x.56*x.57)))
        z     = x.54^(x.58*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.58*inv((x.56*x.57)))
    
    38. Y     = x.54^(x.58*inv(x.56))
        s     = s.33
        x     = (x.57*inv(x.55))
        z     = x.54^(x.57*x.58*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.57*inv(x.55))
    
    39. Y     = x.54^(x.58*inv((x.55*x.56)))
        s     = s.33
        x     = (x.56*x.57)
        z     = x.54^(x.57*x.58*inv(x.55))
        z.1   = map(s.33, 'p')^(x.56*x.57)
    
    40. Y     = x.54^(x.58*inv((x.56*x.57)))
        s     = s.33
        x     = (x.57*inv(x.55))
        z     = x.54^(x.58*inv((x.55*x.56)))
        z.1   = map(s.33, 'p')^(x.57*inv(x.55))
    
    41. Y     = x.55^(x.56*x.60*inv((x.57*x.58)))
        s     = s.34
        x     = (x.58*x.59*inv(x.56))
        z     = x.55^(x.59*x.60*inv(x.57))
        z.1   = map(s.34, 'p')^(x.58*x.59*inv(x.56))
    
    42. Y     = x.55^(x.57*x.60*inv((x.58*x.59)))
        s     = s.34
        x     = (x.59*inv((x.56*x.57)))
        z     = x.55^(x.60*inv((x.56*x.58)))
        z.1   = map(s.34, 'p')^(x.59*inv((x.56*x.57)))
    
    43. Y     = x.55^(x.57*inv((x.58*x.59)))
        s     = s.34
        x     = (x.59*x.60*inv((x.56*x.57)))
        z     = x.55^(x.60*inv((x.56*x.58)))
        z.1   = map(s.34, 'p')^(x.59*x.60*inv((x.56*x.57)))
    
    44. Y     = x.55^(x.58*x.60*inv(x.56))
        s     = s.34
        x     = (x.56*x.59*inv((x.57*x.58)))
        z     = x.55^(x.59*x.60*inv(x.57))
        z.1   = map(s.34, 'p')^(x.56*x.59*inv((x.57*x.58)))
    
    45. Y     = x.55^(x.58*x.60*inv(x.56))
        s     = s.34
        x     = (x.59*inv((x.57*x.58)))
        z     = x.55^(x.59*x.60*inv((x.56*x.57)))
        z.1   = map(s.34, 'p')^(x.59*inv((x.57*x.58)))
    
    46. Y     = x.55^(x.60*inv((x.57*x.58)))
        s     = s.34
        x     = (x.58*x.59*inv(x.56))
        z     = x.55^(x.59*x.60*inv((x.56*x.57)))
        z.1   = map(s.34, 'p')^(x.58*x.59*inv(x.56))
    
    47. Y     = x.56^(x.58*x.62*inv((x.59*x.60)))
        s     = s.35
        x     = (x.60*x.61*inv((x.57*x.58)))
        z     = x.56^(x.61*x.62*inv((x.57*x.59)))
        z.1   = map(s.35, 'p')^(x.60*x.61*inv((x.57*x.58)))
  */

lemma executable:
  exists-trace
  "∃ #i. (Finish( ) @ #i) ∧ (¬(∃ A #j. Reveal( A ) @ #j))"
/*
guarded formula characterizing all satisfying traces:
"∃ #i. (Finish( ) @ #i) ∧ ∀ A #j. (Reveal( A ) @ #j) ⇒ ⊥"
*/
simplify
solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
  case I_3_send
  solve( splitEqs(0) )
    case split_case_3
    solve( !KU( mac(Z, h(x.1^(~x*x.2))) ) @ #vk )
      case R_4_send
      solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.7 )
        case I_1_send
        solve( splitEqs(3) )
          case split_case_1
          solve( splitEqs(4) )
            case split_case_1
            solve( !KU( x.1^~y ) @ #vk.4 )
              case R_2_send_case_1
              solve( !KU( mac(map(~s.1, 'p')^~x, h(map(~s.1, 'p')^(~x*~y)))
                     ) @ #vk.5 )
                case I_3_send
                solve( !KU( map(~s, 'p')^~x ) @ #vk.7 )
                  case I_1_send
                  SOLVED // trace found
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma secrecy:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4_receive
  solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
    case I_3_send
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( h(Y^~x) ) @ #vk )
        case c_h
        solve( !KU( mac(Z, h(Y^~x)) ) @ #vk.1 )
          case I_3_send
          solve( splitEqs(3) )
            case split_case_1
            by contradiction /* from formulas */
          next
            case split_case_2
            solve( !KU( Y^(~x*inv(~x.1)) ) @ #vk.4 )
              case I_1_send_case_1
              by solve( !KU( ~x.1 ) @ #vk.6 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x.2 ) @ #vk.8 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.6 )
            qed
          qed
        next
          case R_4_send
          solve( splitEqs(4) )
            case split
            solve( !KU( Y^(~x*inv(~y)) ) @ #vk.8 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x.1 ) @ #vk.13 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.11 )
            qed
          qed
        next
          case c_mac
          solve( !KU( Y^~x ) @ #vk.3 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.3 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.5 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.8 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( z^inv(~x) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.1 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.5 )
      qed
    next
      case split_case_3
      solve( !KU( h(x.1^(~x*x.2)) ) @ #vk )
        case c_h
        solve( !KU( x.1^(~x*x.2) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.4 )
        next
          case I_1_send_case_2
          solve( !KU( mac(Z, h(map(~s, 'p')^(~x*x.1))) ) @ #vk.2 )
            case I_3_send
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p')^x.3 ) @ #vk.5 )
                case I_1_send_case_1
                by solve( !KU( ~x.1 ) @ #vk.5 )
              next
                case I_1_send_case_2
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case R_2_send
                  by solve( !KU( ~y ) @ #vk.9 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.8 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.11 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case I_1_send_case_3
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x ) @ #vk.11 )
              next
                case R_2_send_case_1
                solve( !KU( ~x.1 ) @ #vk.5 )
                  case I_1_send
                  solve( !KU( ~shk.3 ) @ #vk.13 )
                    case Reveal
                    by solve( splitEqs(3) )
                  qed
                next
                  case Reveal
                  by solve( splitEqs(3) )
                next
                  case fresh
                  by solve( splitEqs(3) )
                qed
              next
                case R_2_send_case_2
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.14 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.15 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.15 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case R_2_send_case_3
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y ) @ #vk.11 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case R_2_send
                  by solve( !KU( ~y ) @ #vk.9 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.8 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.11 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case R_4_send
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.15 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case cexp
              solve( !KU( mac(map(~s, 'p')^x.2, h(z)) ) @ #vk.5 )
                case I_3_send
                by solve( !KU( ~x.1 ) @ #vk.5 )
              next
                case R_4_send
                solve( !KU( ~x.1 ) @ #vk.5 )
                  case I_1_send
                  solve( !KU( ~shk.3 ) @ #vk.18 )
                    case Reveal
                    by solve( splitEqs(4) )
                  qed
                next
                  case Reveal
                  by solve( splitEqs(4) )
                next
                  case fresh
                  by solve( splitEqs(4) )
                qed
              next
                case c_mac
                solve( !KU( map(~s, 'p')^x.2 ) @ #vk.9 )
                  case I_1_send_case_1
                  by solve( !KU( ~y ) @ #vk.6 )
                next
                  case I_1_send_case_2
                  solve( !KU( h(map(~s, 'p')^x.3) ) @ #vk.12 )
                    case c_h
                    solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.11 )
                      case I_1_send
                      solve( !KU( map(~s, 'p') ) @ #vk.12 )
                        case I_1_send
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send
                        by solve( !KU( ~y.1 ) @ #vk.17 )
                      next
                        case c_map
                        solve( !KU( ~s ) @ #vk.15 )
                          case I_1_send
                          solve( !KU( ~shk ) @ #vk.17 )
                            case Reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( h(~shk.1) ) @ #vk.16 )
                        case c_h
                        solve( !KU( ~shk.1 ) @ #vk.17 )
                          case Reveal
                          solve( !KU( map(~s, 'p') ) @ #vk.14 )
                            case I_1_send
                            by solve( !KU( ~x ) @ #vk.19 )
                          next
                            case R_2_send
                            by solve( !KU( ~y.1 ) @ #vk.20 )
                          next
                            case c_map
                            solve( !KU( ~s ) @ #vk.18 )
                              case I_1_send
                              solve( !KU( ~shk ) @ #vk.20 )
                                case Reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case I_1_send_case_3
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x ) @ #vk.17 )
                next
                  case R_2_send_case_1
                  solve( !KU( ~x.1 ) @ #vk.6 )
                    case I_1_send
                    solve( !KU( ~shk.3 ) @ #vk.18 )
                      case Reveal
                      by solve( splitEqs(4) )
                    qed
                  next
                    case Reveal
                    by solve( splitEqs(4) )
                  next
                    case fresh
                    by solve( splitEqs(4) )
                  qed
                next
                  case R_2_send_case_2
                  solve( !KU( h(map(~s, 'p')^x.3) ) @ #vk.13 )
                    case c_h
                    solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.12 )
                      case I_1_send
                      solve( !KU( map(~s, 'p') ) @ #vk.13 )
                        case I_1_send
                        by solve( !KU( ~x ) @ #vk.20 )
                      next
                        case R_2_send
                        by solve( !KU( ~y.2 ) @ #vk.21 )
                      next
                        case c_map
                        solve( !KU( ~s ) @ #vk.19 )
                          case I_1_send
                          solve( !KU( ~shk ) @ #vk.21 )
                            case Reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( h(~shk.1) ) @ #vk.20 )
                        case c_h
                        solve( !KU( ~shk.1 ) @ #vk.21 )
                          case Reveal
                          solve( !KU( map(~s, 'p') ) @ #vk.15 )
                            case I_1_send
                            by solve( !KU( ~x ) @ #vk.23 )
                          next
                            case R_2_send
                            by solve( !KU( ~y.2 ) @ #vk.24 )
                          next
                            case c_map
                            solve( !KU( ~s ) @ #vk.22 )
                              case I_1_send
                              solve( !KU( ~shk ) @ #vk.24 )
                                case Reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case cexp
                  solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( map(~s, 'p') ) @ #vk.11 )
                      case I_1_send
                      by solve( !KU( ~x ) @ #vk.15 )
                    next
                      case R_2_send
                      by solve( !KU( ~y.1 ) @ #vk.16 )
                    next
                      case c_map
                      solve( !KU( ~s ) @ #vk.14 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.16 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( h(~shk.1) ) @ #vk.15 )
                      case c_h
                      solve( !KU( ~shk.1 ) @ #vk.16 )
                        case Reveal
                        solve( !KU( map(~s, 'p') ) @ #vk.13 )
                          case I_1_send
                          by solve( !KU( ~x ) @ #vk.18 )
                        next
                          case R_2_send
                          by solve( !KU( ~y.1 ) @ #vk.19 )
                        next
                          case c_map
                          solve( !KU( ~s ) @ #vk.17 )
                            case I_1_send
                            solve( !KU( ~shk ) @ #vk.19 )
                              case Reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_mac
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.6 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.7 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case I_1_send_case_3
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case I_1_send_case_5
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case I_1_send_case_6
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.4 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case R_2_send_case_4
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case R_2_send_case_5
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.6 )
        qed
      qed
    next
      case split_case_4
      solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.6 )
      qed
    next
      case split_case_5
      solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.2 ) @ #vk.7 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.9 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.11 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.7 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.7 )
      qed
    next
      case split_case_6
      solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.7 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.3 ) @ #vk.6 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.3 ) @ #vk.7 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.10 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.12 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.7 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.8 )
      qed
    qed
  qed
next
  case R_3_receive
  solve( St_R_3( A, ~id, kAB, s, X, y, 'p', A.1 ) ▶₀ #i )
    case R_2_send
    solve( !KU( senc(s, h(~shk)) ) @ #vk.6 )
      case I_1_send
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( h(X^~y) ) @ #vk.2 )
          case c_h
          solve( !KU( mac(X, h(X^~y)) ) @ #vk.4 )
            case c_mac
            solve( !KU( X^~y ) @ #vk.7 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.7 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.10 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.8 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.8 )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( mac(z^inv(~y), h(z)) ) @ #vk.3 )
          case c_mac
          solve( !KU( z^inv(~y) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x^(~y*x.1)) ) @ #vk.2 )
          case c_h
          solve( !KU( x^(~y*x.1) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case I_1_send_case_4
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case R_2_send_case_2
            solve( !KU( mac(map(~s, 'p')^x, h(map(~s, 'p')^(~y*x))) ) @ #vk.5 )
              case I_3_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_4_send
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case c_mac
              solve( !KU( map(~s, 'p')^x ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.13 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.9 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.11 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.12 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.12 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case R_2_send_case_6
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( mac(x^inv((~y*x.1)), h(x^inv(x.1))) ) @ #vk.3 )
          case c_mac
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_5
        solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.11 )
        qed
      next
        case split_case_6
        solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.15 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.12 )
        qed
      qed
    next
      case c_senc
      solve( !KU( h(~shk) ) @ #vk.8 )
        case c_h
        solve( !KU( ~shk ) @ #vk.9 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma secrecy_PFS:
  all-traces
  "∀ A x #i.
    (Secret( A, x ) @ #i) ⇒
    ((¬(∃ #j. K( x ) @ #j)) ∨
     (∃ X #r. ((Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)) ∧ (#r < #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ A x #i.
  (Secret( A, x ) @ #i)
 ∧
  (∃ #j. (K( x ) @ #j)) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ¬(#r < #i))"
*/
simplify
solve( Secret( A, x ) @ #i )
  case I_4_receive
  solve( St_I_4( A, ~id, kAB, s, x, Y, 'p', B ) ▶₀ #i )
    case I_3_send
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( h(Y^~x) ) @ #vk )
        case c_h
        solve( !KU( mac(Z, h(Y^~x)) ) @ #vk.1 )
          case I_3_send
          solve( splitEqs(3) )
            case split_case_1
            by contradiction /* from formulas */
          next
            case split_case_2
            solve( !KU( Y^(~x*inv(~x.1)) ) @ #vk.4 )
              case I_1_send_case_1
              by solve( !KU( ~x.1 ) @ #vk.6 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x.2 ) @ #vk.8 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.6 )
            qed
          qed
        next
          case R_4_send
          solve( splitEqs(4) )
            case split
            solve( !KU( Y^(~x*inv(~y)) ) @ #vk.8 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x.1 ) @ #vk.13 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.11 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.11 )
            qed
          qed
        next
          case c_mac
          solve( !KU( Y^~x ) @ #vk.3 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.3 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.5 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.8 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( z^inv(~x) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.1 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.5 )
      qed
    next
      case split_case_3
      solve( !KU( h(x.1^(~x*x.2)) ) @ #vk )
        case c_h
        solve( !KU( x.1^(~x*x.2) ) @ #vk.3 )
          case I_1_send_case_1
          by solve( !KU( ~x ) @ #vk.4 )
        next
          case I_1_send_case_2
          solve( !KU( mac(Z, h(map(~s, 'p')^(~x*x.1))) ) @ #vk.2 )
            case I_3_send
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p')^x.3 ) @ #vk.5 )
                case I_1_send_case_1
                by solve( !KU( ~x.1 ) @ #vk.5 )
              next
                case I_1_send_case_2
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case R_2_send
                  by solve( !KU( ~y ) @ #vk.9 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.8 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.11 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case I_1_send_case_3
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x ) @ #vk.11 )
              next
                case R_2_send_case_1
                solve( !KU( ~x.1 ) @ #vk.5 )
                  case I_1_send
                  solve( !KU( ~shk.3 ) @ #vk.13 )
                    case Reveal
                    by solve( splitEqs(3) )
                  qed
                next
                  case Reveal
                  by solve( splitEqs(3) )
                next
                  case fresh
                  by solve( splitEqs(3) )
                qed
              next
                case R_2_send_case_2
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.14 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.15 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.13 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.15 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              next
                case R_2_send_case_3
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y ) @ #vk.11 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.6 )
                  case I_1_send
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case R_2_send
                  by solve( !KU( ~y ) @ #vk.9 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.8 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.11 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case R_4_send
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.12 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.15 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.16 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.14 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y.1 ) @ #vk.16 )
            next
              case cexp
              solve( !KU( mac(map(~s, 'p')^x.2, h(z)) ) @ #vk.5 )
                case I_3_send
                by solve( !KU( ~x.1 ) @ #vk.5 )
              next
                case R_4_send
                solve( !KU( ~x.1 ) @ #vk.5 )
                  case I_1_send
                  solve( !KU( ~shk.3 ) @ #vk.18 )
                    case Reveal
                    by solve( splitEqs(4) )
                  qed
                next
                  case Reveal
                  by solve( splitEqs(4) )
                next
                  case fresh
                  by solve( splitEqs(4) )
                qed
              next
                case c_mac
                solve( !KU( map(~s, 'p')^x.2 ) @ #vk.9 )
                  case I_1_send_case_1
                  by solve( !KU( ~y ) @ #vk.6 )
                next
                  case I_1_send_case_2
                  solve( !KU( h(map(~s, 'p')^x.3) ) @ #vk.12 )
                    case c_h
                    solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.11 )
                      case I_1_send
                      solve( !KU( map(~s, 'p') ) @ #vk.12 )
                        case I_1_send
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send
                        by solve( !KU( ~y.1 ) @ #vk.17 )
                      next
                        case c_map
                        solve( !KU( ~s ) @ #vk.15 )
                          case I_1_send
                          solve( !KU( ~shk ) @ #vk.17 )
                            case Reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( h(~shk.1) ) @ #vk.16 )
                        case c_h
                        solve( !KU( ~shk.1 ) @ #vk.17 )
                          case Reveal
                          solve( !KU( map(~s, 'p') ) @ #vk.14 )
                            case I_1_send
                            by solve( !KU( ~x ) @ #vk.19 )
                          next
                            case R_2_send
                            by solve( !KU( ~y.1 ) @ #vk.20 )
                          next
                            case c_map
                            solve( !KU( ~s ) @ #vk.18 )
                              case I_1_send
                              solve( !KU( ~shk ) @ #vk.20 )
                                case Reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case I_1_send_case_3
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x ) @ #vk.17 )
                next
                  case R_2_send_case_1
                  solve( !KU( ~x.1 ) @ #vk.6 )
                    case I_1_send
                    solve( !KU( ~shk.3 ) @ #vk.18 )
                      case Reveal
                      by solve( splitEqs(4) )
                    qed
                  next
                    case Reveal
                    by solve( splitEqs(4) )
                  next
                    case fresh
                    by solve( splitEqs(4) )
                  qed
                next
                  case R_2_send_case_2
                  solve( !KU( h(map(~s, 'p')^x.3) ) @ #vk.13 )
                    case c_h
                    solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.12 )
                      case I_1_send
                      solve( !KU( map(~s, 'p') ) @ #vk.13 )
                        case I_1_send
                        by solve( !KU( ~x ) @ #vk.20 )
                      next
                        case R_2_send
                        by solve( !KU( ~y.2 ) @ #vk.21 )
                      next
                        case c_map
                        solve( !KU( ~s ) @ #vk.19 )
                          case I_1_send
                          solve( !KU( ~shk ) @ #vk.21 )
                            case Reveal
                            by contradiction /* from formulas */
                          qed
                        qed
                      qed
                    next
                      case c_senc
                      solve( !KU( h(~shk.1) ) @ #vk.20 )
                        case c_h
                        solve( !KU( ~shk.1 ) @ #vk.21 )
                          case Reveal
                          solve( !KU( map(~s, 'p') ) @ #vk.15 )
                            case I_1_send
                            by solve( !KU( ~x ) @ #vk.23 )
                          next
                            case R_2_send
                            by solve( !KU( ~y.2 ) @ #vk.24 )
                          next
                            case c_map
                            solve( !KU( ~s ) @ #vk.22 )
                              case I_1_send
                              solve( !KU( ~shk ) @ #vk.24 )
                                case Reveal
                                by contradiction /* from formulas */
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.17 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~y.1 ) @ #vk.18 )
                next
                  case cexp
                  solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( map(~s, 'p') ) @ #vk.11 )
                      case I_1_send
                      by solve( !KU( ~x ) @ #vk.15 )
                    next
                      case R_2_send
                      by solve( !KU( ~y.1 ) @ #vk.16 )
                    next
                      case c_map
                      solve( !KU( ~s ) @ #vk.14 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.16 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  next
                    case c_senc
                    solve( !KU( h(~shk.1) ) @ #vk.15 )
                      case c_h
                      solve( !KU( ~shk.1 ) @ #vk.16 )
                        case Reveal
                        solve( !KU( map(~s, 'p') ) @ #vk.13 )
                          case I_1_send
                          by solve( !KU( ~x ) @ #vk.18 )
                        next
                          case R_2_send
                          by solve( !KU( ~y.1 ) @ #vk.19 )
                        next
                          case c_map
                          solve( !KU( ~s ) @ #vk.17 )
                            case I_1_send
                            solve( !KU( ~shk ) @ #vk.19 )
                              case Reveal
                              by contradiction /* from formulas */
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          next
            case c_mac
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.6 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.7 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          qed
        next
          case I_1_send_case_3
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.7 )
        next
          case I_1_send_case_5
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case I_1_send_case_6
          by solve( !KU( ~x.3 ) @ #vk.8 )
        next
          case R_2_send_case_1
          by solve( !KU( ~x ) @ #vk.4 )
        next
          case R_2_send_case_2
          by solve( !KU( ~x ) @ #vk.10 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case R_2_send_case_4
          by solve( !KU( ~x ) @ #vk.5 )
        next
          case R_2_send_case_5
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case cexp
          by solve( !KU( ~x ) @ #vk.6 )
        qed
      qed
    next
      case split_case_4
      solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.6 )
      qed
    next
      case split_case_5
      solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.2 ) @ #vk.7 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.9 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.11 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.7 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.7 )
      qed
    next
      case split_case_6
      solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.2 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.5 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.7 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.3 ) @ #vk.6 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.3 ) @ #vk.7 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.10 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.12 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.7 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.8 )
      qed
    qed
  qed
next
  case R_3_receive
  solve( St_R_3( A, ~id, kAB, s, X, y, 'p', A.1 ) ▶₀ #i )
    case R_2_send
    solve( !KU( senc(s, h(~shk)) ) @ #vk.6 )
      case I_1_send
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( h(X^~y) ) @ #vk.2 )
          case c_h
          solve( !KU( mac(X, h(X^~y)) ) @ #vk.4 )
            case c_mac
            solve( !KU( X^~y ) @ #vk.7 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.7 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.10 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.8 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.8 )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( mac(z^inv(~y), h(z)) ) @ #vk.3 )
          case c_mac
          solve( !KU( z^inv(~y) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( h(x^(~y*x.1)) ) @ #vk.2 )
          case c_h
          solve( !KU( x^(~y*x.1) ) @ #vk.7 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case I_1_send_case_2
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.11 )
          next
            case I_1_send_case_4
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.3 ) @ #vk.12 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case R_2_send_case_2
            solve( !KU( mac(map(~s, 'p')^x, h(map(~s, 'p')^(~y*x))) ) @ #vk.5 )
              case I_3_send
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case R_4_send
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case c_mac
              solve( !KU( map(~s, 'p')^x ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.13 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.9 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.11 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.12 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.12 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            qed
          next
            case R_2_send_case_3
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.10 )
          next
            case R_2_send_case_6
            by solve( !KU( ~y.1 ) @ #vk.13 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_4
        solve( !KU( mac(x^inv((~y*x.1)), h(x^inv(x.1))) ) @ #vk.3 )
          case c_mac
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_5
        solve( !KU( x^(x.1*inv(~y)) ) @ #vk.6 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.11 )
        qed
      next
        case split_case_6
        solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.6 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.11 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.13 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.15 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.12 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.12 )
        qed
      qed
    next
      case c_senc
      solve( !KU( h(~shk) ) @ #vk.8 )
        case c_h
        solve( !KU( ~shk ) @ #vk.9 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma noninjectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'I', 'R', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'I', 'R', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, s, x, Y, 'p', b ) ▶₀ #i )
    case I_3_send
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( mac(Z, h(Y^~x)) ) @ #vk )
        case I_3_send
        solve( splitEqs(3) )
          case split_case_1
          by contradiction /* from formulas */
        next
          case split_case_2
          solve( !KU( Y^(~x*inv(~x.1)) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.4 )
          qed
        qed
      next
        case R_4_send
        solve( splitEqs(4) )
          case split
          solve( !KU( Y^(~x*inv(~y)) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case c_mac
        solve( !KU( h(Y^~x) ) @ #vk.3 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.4 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.3 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.5 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.8 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( z^inv(~x) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x.1 ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.4 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.4 )
      qed
    next
      case split_case_3
      solve( !KU( mac(Z, h(x.1^(~x*x.2))) ) @ #vk )
        case I_3_send
        solve( splitEqs(3) )
          case split_case_1
          by contradiction /* from formulas */
        next
          case split_case_2
          solve( !KU( x.1^(~x*x.2*inv(~x.3)) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.3 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        next
          case split_case_3
          solve( !KU( x.1^~x.2 ) @ #vk.1 )
            case I_1_send_case_1
            solve( !KU( map(~s.1, 'p')^~x ) @ #vk.2 )
              case I_1_send_case_1
              by contradiction /* from formulas */
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case R_2_send
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.4 )
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case R_2_send
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x.2 ) @ #vk.4 )
          qed
        next
          case split_case_4
          solve( !KU( x.1^(~x*inv((x.2*~x.3))) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        next
          case split_case_5
          solve( !KU( x.1^(~x.2*x.3) ) @ #vk.1 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.3 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s.1, 'p')^(~x*x.2) ) @ #vk.2 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by contradiction /* from formulas */
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x.1 ) @ #vk.7 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_6
              by solve( !KU( ~x.1 ) @ #vk.8 )
            next
              case R_2_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.7 )
            next
              case R_2_send_case_4
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.6 )
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.4 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.3 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x.2 ) @ #vk.5 )
          qed
        next
          case split_case_6
          solve( !KU( x.1^(~x*x.2*inv((x.3*~x.4))) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.8 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.4 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.4 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      next
        case R_4_send
        solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.7 )
          case I_1_send
          solve( splitEqs(3) )
            case split_case_1
            solve( splitEqs(4) )
              case split_case_1
              solve( !KU( x.1^~y ) @ #vk.4 )
                case I_1_send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_1
                solve( !KU( mac(map(~s.1, 'p')^~x, h(map(~s.1, 'p')^(~x*~y)))
                       ) @ #vk.5 )
                  case I_3_send
                  by contradiction /* from formulas */
                next
                  case c_mac
                  solve( !KU( h(map(~s.1, 'p')^(~x*~y)) ) @ #vk.8 )
                    case c_h
                    solve( !KU( map(~s.1, 'p')^(~x*~y) ) @ #vk.9 )
                      case I_1_send_case_1
                      by contradiction /* from formulas */
                    next
                      case I_1_send_case_2
                      by solve( !KU( ~x.1 ) @ #vk.13 )
                    next
                      case R_2_send_case_1
                      by solve( !KU( ~x ) @ #vk.10 )
                    next
                      case R_2_send_case_2
                      by solve( !KU( ~y.1 ) @ #vk.14 )
                    next
                      case cexp
                      by solve( !KU( ~x ) @ #vk.12 )
                    qed
                  qed
                qed
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.9 )
              qed
            next
              case split_case_2
              solve( !KU( x.1^(~y*x.2) ) @ #vk.4 )
                case I_1_send_case_1
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.3 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.4 ) @ #vk.12 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                solve( !KU( map(~s.1, 'p')^(~x*x.1) ) @ #vk.7 )
                  case I_1_send_case_1
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case I_1_send_case_2
                  solve( !KU( mac(map(~s, 'p')^(~x*x.1), h(map(~s, 'p')^(~x*~y*x.1)))
                         ) @ #vk.6 )
                    case c_mac
                    solve( !KU( h(map(~s, 'p')^(~x*~y*x.1)) ) @ #vk.9 )
                      case c_h
                      solve( !KU( map(~s, 'p')^(~x*~y*x.1) ) @ #vk.10 )
                        case I_1_send_case_1
                        by solve( !KU( ~x ) @ #vk.10 )
                      next
                        case I_1_send_case_2
                        by solve( !KU( ~x ) @ #vk.12 )
                      next
                        case I_1_send_case_3
                        by solve( !KU( ~y ) @ #vk.12 )
                      next
                        case I_1_send_case_4
                        by solve( !KU( ~x ) @ #vk.14 )
                      next
                        case I_1_send_case_5
                        by solve( !KU( ~x ) @ #vk.15 )
                      next
                        case I_1_send_case_6
                        by solve( !KU( ~x ) @ #vk.15 )
                      next
                        case R_2_send_case_1
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send_case_2
                        by solve( !KU( ~x ) @ #vk.12 )
                      next
                        case R_2_send_case_3
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send_case_4
                        by solve( !KU( ~y.1 ) @ #vk.15 )
                      next
                        case R_2_send_case_5
                        by solve( !KU( ~y.1 ) @ #vk.16 )
                      next
                        case R_2_send_case_6
                        by solve( !KU( ~y.1 ) @ #vk.16 )
                      next
                        case cexp
                        by solve( !KU( ~x ) @ #vk.13 )
                      qed
                    qed
                  qed
                next
                  case I_1_send_case_3
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x.2 ) @ #vk.12 )
                next
                  case I_1_send_case_5
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case I_1_send_case_6
                  by solve( !KU( ~x.3 ) @ #vk.13 )
                next
                  case R_2_send_case_1
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case R_2_send_case_2
                  by solve( !KU( ~x ) @ #vk.14 )
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.13 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~x ) @ #vk.11 )
                next
                  case R_2_send_case_5
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case cexp
                  by solve( !KU( ~x ) @ #vk.11 )
                qed
              next
                case R_2_send_case_3
                by solve( !KU( ~y ) @ #vk.13 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case R_2_send_case_6
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.10 )
              qed
            qed
          next
            case split_case_2
            solve( !KU( x.1^(~x*x.2*inv(~y)) ) @ #vk.7 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case I_1_send_case_3
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x.3 ) @ #vk.11 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.12 )
            next
              case R_2_send_case_1
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.10 )
            qed
          next
            case split_case_3
            solve( splitEqs(4) )
              case split_case_1
              solve( !KU( x.1^(~x*inv((~y*x.2))) ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x.3 ) @ #vk.11 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case cexp
                by solve( !KU( ~x ) @ #vk.10 )
              qed
            next
              case split_case_2
              solve( !KU( x.1^(~x*x.2*inv((~y*x.3))) ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case I_1_send_case_3
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.4 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.4 ) @ #vk.12 )
              next
                case R_2_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send_case_2
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case cexp
                by solve( !KU( ~x ) @ #vk.10 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~shk.1) ) @ #vk.9 )
            case c_h
            solve( !KU( ~shk.1 ) @ #vk.10 )
              case Reveal
              solve( splitEqs(3) )
                case split_case_1
                solve( splitEqs(4) )
                  case split_case_1
                  solve( !KU( x.1^~y ) @ #vk.6 )
                    case I_1_send
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case R_2_send_case_1
                    solve( !KU( mac(map(s.1, 'p')^~x, h(map(s.1, 'p')^(~x*~y)))
                           ) @ #vk.7 )
                      case I_3_send
                      solve( !KU( ~s ) @ #vk.10 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.12 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_mac
                      solve( !KU( h(map(s.1, 'p')^(~x*~y)) ) @ #vk.11 )
                        case c_h
                        solve( !KU( map(s.1, 'p')^(~x*~y) ) @ #vk.12 )
                          case I_1_send_case_1
                          by solve( !KU( ~y ) @ #vk.13 )
                        next
                          case I_1_send_case_2
                          by solve( !KU( ~x.1 ) @ #vk.16 )
                        next
                          case R_2_send_case_1
                          by solve( !KU( ~x ) @ #vk.13 )
                        next
                          case R_2_send_case_2
                          by solve( !KU( ~y.1 ) @ #vk.17 )
                        next
                          case cexp
                          by solve( !KU( ~x ) @ #vk.15 )
                        qed
                      qed
                    qed
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case cexp
                    by solve( !KU( ~y ) @ #vk.12 )
                  qed
                next
                  case split_case_2
                  solve( !KU( x.1^(~y*x.2) ) @ #vk.6 )
                    case I_1_send_case_1
                    by solve( !KU( ~y ) @ #vk.11 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~x.2 ) @ #vk.14 )
                  next
                    case I_1_send_case_4
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case I_1_send_case_5
                    by solve( !KU( ~x.3 ) @ #vk.15 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case R_2_send_case_2
                    solve( !KU( map(s.1, 'p')^(~x*x.1) ) @ #vk.9 )
                      case I_1_send_case_1
                      by solve( !KU( ~x ) @ #vk.12 )
                    next
                      case I_1_send_case_2
                      solve( !KU( ~s ) @ #vk.10 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.13 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case I_1_send_case_3
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case I_1_send_case_4
                      by solve( !KU( ~x.2 ) @ #vk.15 )
                    next
                      case I_1_send_case_5
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case I_1_send_case_6
                      by solve( !KU( ~x.3 ) @ #vk.16 )
                    next
                      case R_2_send_case_1
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case R_2_send_case_2
                      by solve( !KU( ~x ) @ #vk.17 )
                    next
                      case R_2_send_case_3
                      by solve( !KU( ~y.1 ) @ #vk.16 )
                    next
                      case R_2_send_case_4
                      by solve( !KU( ~x ) @ #vk.14 )
                    next
                      case R_2_send_case_5
                      by solve( !KU( ~y.1 ) @ #vk.17 )
                    next
                      case cexp
                      by solve( !KU( ~x ) @ #vk.14 )
                    qed
                  next
                    case R_2_send_case_3
                    by solve( !KU( ~y ) @ #vk.16 )
                  next
                    case R_2_send_case_4
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_5
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case R_2_send_case_6
                    by solve( !KU( ~y.1 ) @ #vk.16 )
                  next
                    case cexp
                    by solve( !KU( ~y ) @ #vk.13 )
                  qed
                qed
              next
                case split_case_2
                solve( !KU( x.1^(~x*x.2*inv(~y)) ) @ #vk.9 )
                  case I_1_send_case_1
                  by solve( !KU( ~x ) @ #vk.12 )
                next
                  case I_1_send_case_2
                  by solve( !KU( ~x ) @ #vk.12 )
                next
                  case I_1_send_case_3
                  by solve( !KU( ~y ) @ #vk.14 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x.2 ) @ #vk.14 )
                next
                  case I_1_send_case_5
                  by solve( !KU( ~x.2 ) @ #vk.15 )
                next
                  case R_2_send_case_1
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case R_2_send_case_2
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.15 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~y.1 ) @ #vk.16 )
                next
                  case cexp
                  by solve( !KU( ~x ) @ #vk.13 )
                qed
              next
                case split_case_3
                solve( splitEqs(4) )
                  case split_case_1
                  solve( !KU( x.1^(~x*inv((~y*x.2))) ) @ #vk.9 )
                    case I_1_send_case_1
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~x.2 ) @ #vk.14 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~x ) @ #vk.13 )
                  next
                    case cexp
                    by solve( !KU( ~x ) @ #vk.13 )
                  qed
                next
                  case split_case_2
                  solve( !KU( x.1^(~x*x.2*inv((~y*x.3))) ) @ #vk.9 )
                    case I_1_send_case_1
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~y ) @ #vk.15 )
                  next
                    case I_1_send_case_4
                    by solve( !KU( ~x.3 ) @ #vk.14 )
                  next
                    case I_1_send_case_5
                    by solve( !KU( ~x.3 ) @ #vk.15 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~x ) @ #vk.16 )
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~x ) @ #vk.16 )
                  next
                    case R_2_send_case_3
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_4
                    by solve( !KU( ~y.1 ) @ #vk.16 )
                  next
                    case cexp
                    by solve( !KU( ~x ) @ #vk.13 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.3 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.4 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.5 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.5 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.6 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.7 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.8 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.9 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.5 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.11 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.7 )
          qed
        qed
      qed
    next
      case split_case_4
      solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x.2 ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.4 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.5 )
      qed
    next
      case split_case_5
      solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.3 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.5 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.8 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.10 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.6 )
      qed
    next
      case split_case_6
      solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.3 ) @ #vk.5 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.3 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.9 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.11 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.7 )
      qed
    qed
  qed
qed

lemma injectiveagreementINITIATOR:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'I', 'R', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'I', 'R', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'I', 'R', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'I', 'R', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'I', 'R', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'I', 'R', t> ) @ #i )
  case I_4_receive
  solve( St_I_4( a, ~id, kAB, s, x, Y, 'p', b ) ▶₀ #i )
    case I_3_send
    solve( splitEqs(0) )
      case split_case_1
      solve( !KU( mac(Z, h(Y^~x)) ) @ #vk )
        case I_3_send
        solve( splitEqs(3) )
          case split_case_1
          by contradiction /* from formulas */
        next
          case split_case_2
          solve( !KU( Y^(~x*inv(~x.1)) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.4 )
          qed
        qed
      next
        case R_4_send
        solve( splitEqs(4) )
          case split
          solve( !KU( Y^(~x*inv(~y)) ) @ #vk.6 )
            case I_1_send_case_1
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.11 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.12 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.10 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.9 )
          qed
        qed
      next
        case c_mac
        solve( !KU( h(Y^~x) ) @ #vk.3 )
          case c_h
          solve( !KU( Y^~x ) @ #vk.4 )
            case I_1_send_case_1
            solve( !KU( map(~s, 'p') ) @ #vk.3 )
              case I_1_send
              by solve( !KU( ~x ) @ #vk.6 )
            next
              case R_2_send
              by solve( !KU( ~y ) @ #vk.6 )
            next
              case c_map
              solve( !KU( ~s ) @ #vk.5 )
                case I_1_send
                solve( !KU( ~shk ) @ #vk.8 )
                  case Reveal
                  by contradiction /* from formulas */
                qed
              qed
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      qed
    next
      case split_case_2
      solve( !KU( z^inv(~x) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x.1 ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.1 ) @ #vk.5 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.4 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.4 )
      qed
    next
      case split_case_3
      solve( !KU( mac(Z, h(x.1^(~x*x.2))) ) @ #vk )
        case I_3_send
        solve( splitEqs(3) )
          case split_case_1
          by contradiction /* from formulas */
        next
          case split_case_2
          solve( !KU( x.1^(~x*x.2*inv(~x.3)) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.3 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        next
          case split_case_3
          solve( !KU( x.1^~x.2 ) @ #vk.1 )
            case I_1_send_case_1
            solve( !KU( map(~s.1, 'p')^~x ) @ #vk.2 )
              case I_1_send_case_1
              by contradiction /* from formulas */
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case R_2_send
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.4 )
            qed
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case R_2_send
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x.2 ) @ #vk.4 )
          qed
        next
          case split_case_4
          solve( !KU( x.1^(~x*inv((x.2*~x.3))) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.6 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        next
          case split_case_5
          solve( !KU( x.1^(~x.2*x.3) ) @ #vk.1 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.3 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s.1, 'p')^(~x*x.2) ) @ #vk.2 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case I_1_send_case_2
              by contradiction /* from formulas */
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x.1 ) @ #vk.7 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_6
              by solve( !KU( ~x.1 ) @ #vk.8 )
            next
              case R_2_send_case_1
              by solve( !KU( ~x ) @ #vk.4 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.7 )
            next
              case R_2_send_case_4
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.6 )
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.3 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.4 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.3 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x.1 ) @ #vk.4 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x.2 ) @ #vk.5 )
          qed
        next
          case split_case_6
          solve( !KU( x.1^(~x*x.2*inv((x.3*~x.4))) ) @ #vk.2 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x ) @ #vk.4 )
          next
            case I_1_send_case_3
            by solve( !KU( ~x.3 ) @ #vk.8 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.4 ) @ #vk.6 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x.4 ) @ #vk.7 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.9 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.6 )
          next
            case R_2_send_case_4
            by solve( !KU( ~y ) @ #vk.7 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.5 )
          qed
        qed
      next
        case R_4_send
        solve( !KU( senc(s.1, h(~shk.1)) ) @ #vk.7 )
          case I_1_send
          solve( splitEqs(3) )
            case split_case_1
            solve( splitEqs(4) )
              case split_case_1
              solve( !KU( x.1^~y ) @ #vk.4 )
                case I_1_send
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_1
                solve( !KU( mac(map(~s.1, 'p')^~x, h(map(~s.1, 'p')^(~x*~y)))
                       ) @ #vk.5 )
                  case I_3_send
                  solve( (#i2 < #i)  ∥ (#i < #i2) )
                    case case_1
                    solve( Commit( a2, b2,
                                   <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                                    h(map(~s, 'p')^(~x*~y))>
                           ) @ #i2 )
                      case I_4_receive
                      solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                             ) ▶₀ #i2 )
                        case I_3_send
                        by contradiction /* cyclic */
                      qed
                    qed
                  next
                    case case_2
                    solve( Commit( a2, b2,
                                   <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                                    h(map(~s, 'p')^(~x*~y))>
                           ) @ #i2 )
                      case I_4_receive
                      solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                             ) ▶₀ #i2 )
                        case I_3_send
                        by contradiction /* cyclic */
                      qed
                    qed
                  qed
                next
                  case c_mac
                  solve( !KU( h(map(~s.1, 'p')^(~x*~y)) ) @ #vk.8 )
                    case c_h
                    solve( !KU( map(~s.1, 'p')^(~x*~y) ) @ #vk.9 )
                      case I_1_send_case_1
                      solve( (#i2 < #i)  ∥ (#i < #i2) )
                        case case_1
                        solve( Commit( a2, b2,
                                       <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                                        h(map(~s, 'p')^(~x*~y))>
                               ) @ #i2 )
                          case I_4_receive
                          solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                                 ) ▶₀ #i2 )
                            case I_3_send
                            by contradiction /* cyclic */
                          qed
                        qed
                      next
                        case case_2
                        solve( Commit( a2, b2,
                                       <'I', 'R', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                                        h(map(~s, 'p')^(~x*~y))>
                               ) @ #i2 )
                          case I_4_receive
                          solve( St_I_4( a2, ~id.1, kAB, ~s, ~x, map(~s, 'p')^~y, 'p', b2
                                 ) ▶₀ #i2 )
                            case I_3_send
                            by contradiction /* cyclic */
                          qed
                        qed
                      qed
                    next
                      case I_1_send_case_2
                      by solve( !KU( ~x.1 ) @ #vk.13 )
                    next
                      case R_2_send_case_1
                      by solve( !KU( ~x ) @ #vk.10 )
                    next
                      case R_2_send_case_2
                      by solve( !KU( ~y.1 ) @ #vk.14 )
                    next
                      case cexp
                      by solve( !KU( ~x ) @ #vk.12 )
                    qed
                  qed
                qed
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.9 )
              qed
            next
              case split_case_2
              solve( !KU( x.1^(~y*x.2) ) @ #vk.4 )
                case I_1_send_case_1
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.3 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.4 ) @ #vk.12 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                solve( !KU( map(~s.1, 'p')^(~x*x.1) ) @ #vk.7 )
                  case I_1_send_case_1
                  by solve( !KU( ~x ) @ #vk.9 )
                next
                  case I_1_send_case_2
                  solve( !KU( mac(map(~s, 'p')^(~x*x.1), h(map(~s, 'p')^(~x*~y*x.1)))
                         ) @ #vk.6 )
                    case c_mac
                    solve( !KU( h(map(~s, 'p')^(~x*~y*x.1)) ) @ #vk.9 )
                      case c_h
                      solve( !KU( map(~s, 'p')^(~x*~y*x.1) ) @ #vk.10 )
                        case I_1_send_case_1
                        by solve( !KU( ~x ) @ #vk.10 )
                      next
                        case I_1_send_case_2
                        by solve( !KU( ~x ) @ #vk.12 )
                      next
                        case I_1_send_case_3
                        by solve( !KU( ~y ) @ #vk.12 )
                      next
                        case I_1_send_case_4
                        by solve( !KU( ~x ) @ #vk.14 )
                      next
                        case I_1_send_case_5
                        by solve( !KU( ~x ) @ #vk.15 )
                      next
                        case I_1_send_case_6
                        by solve( !KU( ~x ) @ #vk.15 )
                      next
                        case R_2_send_case_1
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send_case_2
                        by solve( !KU( ~x ) @ #vk.12 )
                      next
                        case R_2_send_case_3
                        by solve( !KU( ~x ) @ #vk.16 )
                      next
                        case R_2_send_case_4
                        by solve( !KU( ~y.1 ) @ #vk.15 )
                      next
                        case R_2_send_case_5
                        by solve( !KU( ~y.1 ) @ #vk.16 )
                      next
                        case R_2_send_case_6
                        by solve( !KU( ~y.1 ) @ #vk.16 )
                      next
                        case cexp
                        by solve( !KU( ~x ) @ #vk.13 )
                      qed
                    qed
                  qed
                next
                  case I_1_send_case_3
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x.2 ) @ #vk.12 )
                next
                  case I_1_send_case_5
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case I_1_send_case_6
                  by solve( !KU( ~x.3 ) @ #vk.13 )
                next
                  case R_2_send_case_1
                  by solve( !KU( ~x ) @ #vk.10 )
                next
                  case R_2_send_case_2
                  by solve( !KU( ~x ) @ #vk.14 )
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.13 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~x ) @ #vk.11 )
                next
                  case R_2_send_case_5
                  by solve( !KU( ~y.1 ) @ #vk.14 )
                next
                  case cexp
                  by solve( !KU( ~x ) @ #vk.11 )
                qed
              next
                case R_2_send_case_3
                by solve( !KU( ~y ) @ #vk.13 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case R_2_send_case_6
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.10 )
              qed
            qed
          next
            case split_case_2
            solve( !KU( x.1^(~x*x.2*inv(~y)) ) @ #vk.7 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.9 )
            next
              case I_1_send_case_3
              by solve( !KU( ~y ) @ #vk.11 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x.3 ) @ #vk.11 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.12 )
            next
              case R_2_send_case_1
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case R_2_send_case_2
              by solve( !KU( ~x ) @ #vk.13 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.12 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case cexp
              by solve( !KU( ~x ) @ #vk.10 )
            qed
          next
            case split_case_3
            solve( splitEqs(4) )
              case split_case_1
              solve( !KU( x.1^(~x*inv((~y*x.2))) ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~y ) @ #vk.10 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x.3 ) @ #vk.11 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case cexp
                by solve( !KU( ~x ) @ #vk.10 )
              qed
            next
              case split_case_2
              solve( !KU( x.1^(~x*x.2*inv((~y*x.3))) ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case I_1_send_case_3
                by solve( !KU( ~y ) @ #vk.12 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.4 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.4 ) @ #vk.12 )
              next
                case R_2_send_case_1
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send_case_2
                by solve( !KU( ~x ) @ #vk.13 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case cexp
                by solve( !KU( ~x ) @ #vk.10 )
              qed
            qed
          qed
        next
          case c_senc
          solve( !KU( h(~shk.1) ) @ #vk.9 )
            case c_h
            solve( !KU( ~shk.1 ) @ #vk.10 )
              case Reveal
              solve( splitEqs(3) )
                case split_case_1
                solve( splitEqs(4) )
                  case split_case_1
                  solve( !KU( x.1^~y ) @ #vk.6 )
                    case I_1_send
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case R_2_send_case_1
                    solve( !KU( mac(map(s.1, 'p')^~x, h(map(s.1, 'p')^(~x*~y)))
                           ) @ #vk.7 )
                      case I_3_send
                      solve( !KU( ~s ) @ #vk.10 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.12 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case c_mac
                      solve( !KU( h(map(s.1, 'p')^(~x*~y)) ) @ #vk.11 )
                        case c_h
                        solve( !KU( map(s.1, 'p')^(~x*~y) ) @ #vk.12 )
                          case I_1_send_case_1
                          by solve( !KU( ~y ) @ #vk.13 )
                        next
                          case I_1_send_case_2
                          by solve( !KU( ~x.1 ) @ #vk.16 )
                        next
                          case R_2_send_case_1
                          by solve( !KU( ~x ) @ #vk.13 )
                        next
                          case R_2_send_case_2
                          by solve( !KU( ~y.1 ) @ #vk.17 )
                        next
                          case cexp
                          by solve( !KU( ~x ) @ #vk.15 )
                        qed
                      qed
                    qed
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case cexp
                    by solve( !KU( ~y ) @ #vk.12 )
                  qed
                next
                  case split_case_2
                  solve( !KU( x.1^(~y*x.2) ) @ #vk.6 )
                    case I_1_send_case_1
                    by solve( !KU( ~y ) @ #vk.11 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~x.2 ) @ #vk.14 )
                  next
                    case I_1_send_case_4
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case I_1_send_case_5
                    by solve( !KU( ~x.3 ) @ #vk.15 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~y ) @ #vk.12 )
                  next
                    case R_2_send_case_2
                    solve( !KU( map(s.1, 'p')^(~x*x.1) ) @ #vk.9 )
                      case I_1_send_case_1
                      by solve( !KU( ~x ) @ #vk.12 )
                    next
                      case I_1_send_case_2
                      solve( !KU( ~s ) @ #vk.10 )
                        case I_1_send
                        solve( !KU( ~shk ) @ #vk.13 )
                          case Reveal
                          by contradiction /* from formulas */
                        qed
                      qed
                    next
                      case I_1_send_case_3
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case I_1_send_case_4
                      by solve( !KU( ~x.2 ) @ #vk.15 )
                    next
                      case I_1_send_case_5
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case I_1_send_case_6
                      by solve( !KU( ~x.3 ) @ #vk.16 )
                    next
                      case R_2_send_case_1
                      by solve( !KU( ~x ) @ #vk.13 )
                    next
                      case R_2_send_case_2
                      by solve( !KU( ~x ) @ #vk.17 )
                    next
                      case R_2_send_case_3
                      by solve( !KU( ~y.1 ) @ #vk.16 )
                    next
                      case R_2_send_case_4
                      by solve( !KU( ~x ) @ #vk.14 )
                    next
                      case R_2_send_case_5
                      by solve( !KU( ~y.1 ) @ #vk.17 )
                    next
                      case cexp
                      by solve( !KU( ~x ) @ #vk.14 )
                    qed
                  next
                    case R_2_send_case_3
                    by solve( !KU( ~y ) @ #vk.16 )
                  next
                    case R_2_send_case_4
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_5
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case R_2_send_case_6
                    by solve( !KU( ~y.1 ) @ #vk.16 )
                  next
                    case cexp
                    by solve( !KU( ~y ) @ #vk.13 )
                  qed
                qed
              next
                case split_case_2
                solve( !KU( x.1^(~x*x.2*inv(~y)) ) @ #vk.9 )
                  case I_1_send_case_1
                  by solve( !KU( ~x ) @ #vk.12 )
                next
                  case I_1_send_case_2
                  by solve( !KU( ~x ) @ #vk.12 )
                next
                  case I_1_send_case_3
                  by solve( !KU( ~y ) @ #vk.14 )
                next
                  case I_1_send_case_4
                  by solve( !KU( ~x.2 ) @ #vk.14 )
                next
                  case I_1_send_case_5
                  by solve( !KU( ~x.2 ) @ #vk.15 )
                next
                  case R_2_send_case_1
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case R_2_send_case_2
                  by solve( !KU( ~x ) @ #vk.16 )
                next
                  case R_2_send_case_3
                  by solve( !KU( ~y.1 ) @ #vk.15 )
                next
                  case R_2_send_case_4
                  by solve( !KU( ~y.1 ) @ #vk.16 )
                next
                  case cexp
                  by solve( !KU( ~x ) @ #vk.13 )
                qed
              next
                case split_case_3
                solve( splitEqs(4) )
                  case split_case_1
                  solve( !KU( x.1^(~x*inv((~y*x.2))) ) @ #vk.9 )
                    case I_1_send_case_1
                    by solve( !KU( ~y ) @ #vk.13 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~x.2 ) @ #vk.14 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~x ) @ #vk.13 )
                  next
                    case cexp
                    by solve( !KU( ~x ) @ #vk.13 )
                  qed
                next
                  case split_case_2
                  solve( !KU( x.1^(~x*x.2*inv((~y*x.3))) ) @ #vk.9 )
                    case I_1_send_case_1
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case I_1_send_case_2
                    by solve( !KU( ~x ) @ #vk.12 )
                  next
                    case I_1_send_case_3
                    by solve( !KU( ~y ) @ #vk.15 )
                  next
                    case I_1_send_case_4
                    by solve( !KU( ~x.3 ) @ #vk.14 )
                  next
                    case I_1_send_case_5
                    by solve( !KU( ~x.3 ) @ #vk.15 )
                  next
                    case R_2_send_case_1
                    by solve( !KU( ~x ) @ #vk.16 )
                  next
                    case R_2_send_case_2
                    by solve( !KU( ~x ) @ #vk.16 )
                  next
                    case R_2_send_case_3
                    by solve( !KU( ~y.1 ) @ #vk.15 )
                  next
                    case R_2_send_case_4
                    by solve( !KU( ~y.1 ) @ #vk.16 )
                  next
                    case cexp
                    by solve( !KU( ~x ) @ #vk.13 )
                  qed
                qed
              qed
            qed
          qed
        qed
      next
        case c_mac
        solve( !KU( h(x.1^(~x*x.2)) ) @ #vk.3 )
          case c_h
          solve( !KU( x.1^(~x*x.2) ) @ #vk.4 )
            case I_1_send_case_1
            by solve( !KU( ~x ) @ #vk.5 )
          next
            case I_1_send_case_2
            solve( !KU( map(~s, 'p')^x.1 ) @ #vk.3 )
              case I_1_send_case_1
              by solve( !KU( ~x ) @ #vk.5 )
            next
              case I_1_send_case_2
              by solve( !KU( ~x ) @ #vk.7 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_4
              by solve( !KU( ~x ) @ #vk.8 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x ) @ #vk.10 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.5 )
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.12 )
            next
              case R_2_send_case_3
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              solve( !KU( map(~s, 'p') ) @ #vk.6 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case R_2_send
                by solve( !KU( ~y ) @ #vk.8 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.7 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            qed
          next
            case I_1_send_case_3
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case I_1_send_case_4
            by solve( !KU( ~x.2 ) @ #vk.8 )
          next
            case I_1_send_case_5
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case I_1_send_case_6
            by solve( !KU( ~x.3 ) @ #vk.9 )
          next
            case R_2_send_case_1
            by solve( !KU( ~x ) @ #vk.5 )
          next
            case R_2_send_case_2
            by solve( !KU( ~x ) @ #vk.11 )
          next
            case R_2_send_case_3
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case R_2_send_case_4
            by solve( !KU( ~x ) @ #vk.6 )
          next
            case R_2_send_case_5
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case cexp
            by solve( !KU( ~x ) @ #vk.7 )
          qed
        qed
      qed
    next
      case split_case_4
      solve( !KU( x.1^inv((~x*x.2)) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x.2 ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case R_2_send_case_1
        by solve( !KU( ~y ) @ #vk.4 )
      next
        case R_2_send_case_2
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.5 )
      qed
    next
      case split_case_5
      solve( !KU( x.1^(x.2*inv(~x)) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.3 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.5 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.2 ) @ #vk.5 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.2 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.8 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.10 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.6 )
      qed
    next
      case split_case_6
      solve( !KU( x.1^(x.2*inv((~x*x.3))) ) @ #vk.1 )
        case I_1_send_case_1
        by solve( !KU( ~x ) @ #vk.4 )
      next
        case I_1_send_case_2
        by solve( !KU( ~x ) @ #vk.6 )
      next
        case I_1_send_case_3
        by solve( !KU( ~x.3 ) @ #vk.5 )
      next
        case I_1_send_case_4
        by solve( !KU( ~x.3 ) @ #vk.6 )
      next
        case R_2_send_case_1
        by solve( !KU( ~x ) @ #vk.9 )
      next
        case R_2_send_case_2
        by solve( !KU( ~x ) @ #vk.11 )
      next
        case R_2_send_case_3
        by solve( !KU( ~y ) @ #vk.5 )
      next
        case R_2_send_case_4
        by solve( !KU( ~y ) @ #vk.6 )
      next
        case cexp
        by solve( !KU( ~x ) @ #vk.7 )
      qed
    qed
  qed
qed

lemma noninjectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j. Running( b, a, <'R', 'I', t> ) @ #j) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j. (Running( b, a, <'R', 'I', t> ) @ #j) ⇒ ⊥) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, s, X, y, 'p', b ) ▶₀ #i )
    case R_2_send
    solve( !KU( senc(s, h(~shk)) ) @ #vk.5 )
      case I_1_send
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( mac(X, h(X^~y)) ) @ #vk.2 )
          case c_mac
          solve( !KU( h(X^~y) ) @ #vk.6 )
            case c_h
            solve( !KU( X^~y ) @ #vk.7 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.7 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.10 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.8 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.8 )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( mac(z^inv(~y), h(z)) ) @ #vk.2 )
          case c_mac
          solve( !KU( z^inv(~y) ) @ #vk.5 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( mac(x^x.1, h(x^(~y*x.1))) ) @ #vk.2 )
          case I_3_send
          solve( !KU( map(~s.1, 'p')^~y ) @ #vk.6 )
            case I_1_send
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case R_2_send_case_1
            by contradiction /* from formulas */
          next
            case R_2_send_case_2
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.8 )
          qed
        next
          case R_4_send
          solve( !KU( mac(map(s.1, 'p')^~y.1, h(map(s.1, 'p')^(~y*~y.1)))
                 ) @ #vk.7 )
            case R_4_send
            by contradiction /* cyclic */
          next
            case c_mac
            solve( !KU( h(map(s.1, 'p')^(~y*~y.1)) ) @ #vk.11 )
              case c_h
              solve( !KU( map(s.1, 'p')^(~y*~y.1) ) @ #vk.12 )
                case I_1_send
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.13 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.2 ) @ #vk.17 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.15 )
              qed
            qed
          qed
        next
          case c_mac
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.6 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.7 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.11 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.12 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.13 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.9 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.11 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.12 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.12 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( mac(x^inv((~y*x.1)), h(x^inv(x.1))) ) @ #vk.2 )
          case c_mac
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_5
        solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.10 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.10 )
        qed
      next
        case split_case_6
        solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.10 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.11 )
        qed
      qed
    next
      case c_senc
      solve( !KU( h(~shk) ) @ #vk.7 )
        case c_h
        solve( !KU( ~shk ) @ #vk.8 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

lemma injectiveagreementRESPONDER:
  all-traces
  "∀ a b t #i.
    (Commit( a, b, <'R', 'I', t> ) @ #i) ⇒
    ((∃ #j.
       ((Running( b, a, <'R', 'I', t> ) @ #j) ∧ (#j < #i)) ∧
       (¬(∃ a2 b2 #i2.
           (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ (¬(#i2 = #i))))) ∨
     (∃ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i)))"
/*
guarded formula characterizing all counter-examples:
"∃ a b t #i.
  (Commit( a, b, <'R', 'I', t> ) @ #i)
 ∧
  (∀ #j.
    (Running( b, a, <'R', 'I', t> ) @ #j)
   ⇒
    ((¬(#j < #i)) ∨
     (∃ a2 b2 #i2.
       (Commit( a2, b2, <'R', 'I', t> ) @ #i2) ∧ ¬(#i2 = #i)))) ∧
  (∀ X #r. (Reveal( X ) @ #r) ∧ (Honest( X ) @ #i) ⇒ ⊥)"
*/
simplify
solve( Commit( a, b, <'R', 'I', t> ) @ #i )
  case R_3_receive
  solve( St_R_3( a, ~id, kAB, s, X, y, 'p', b ) ▶₀ #i )
    case R_2_send
    solve( !KU( senc(s, h(~shk)) ) @ #vk.5 )
      case I_1_send
      solve( splitEqs(0) )
        case split_case_1
        solve( !KU( mac(X, h(X^~y)) ) @ #vk.2 )
          case c_mac
          solve( !KU( h(X^~y) ) @ #vk.6 )
            case c_h
            solve( !KU( X^~y ) @ #vk.7 )
              case I_1_send
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_1
              solve( !KU( map(~s, 'p') ) @ #vk.7 )
                case I_1_send
                by solve( !KU( ~x ) @ #vk.9 )
              next
                case R_2_send
                by solve( !KU( ~y.1 ) @ #vk.10 )
              next
                case c_map
                solve( !KU( ~s ) @ #vk.8 )
                  case I_1_send
                  solve( !KU( ~shk ) @ #vk.10 )
                    case Reveal
                    by contradiction /* from formulas */
                  qed
                qed
              qed
            next
              case R_2_send_case_2
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.8 )
            qed
          qed
        qed
      next
        case split_case_2
        solve( !KU( mac(z^inv(~y), h(z)) ) @ #vk.2 )
          case c_mac
          solve( !KU( z^inv(~y) ) @ #vk.5 )
            case I_1_send_case_1
            by solve( !KU( ~x.1 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.1 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.9 )
          qed
        qed
      next
        case split_case_3
        solve( !KU( mac(x^x.1, h(x^(~y*x.1))) ) @ #vk.2 )
          case I_3_send
          solve( !KU( map(~s.1, 'p')^~y ) @ #vk.6 )
            case I_1_send
            by solve( !KU( ~y ) @ #vk.8 )
          next
            case R_2_send_case_1
            solve( (#i2 < #i)  ∥ (#i < #i2) )
              case case_1
              solve( Commit( a2, b2,
                             <'R', 'I', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                              h(map(~s, 'p')^(~x*~y))>
                     ) @ #i2 )
                case R_3_receive
                solve( St_R_3( a2, ~id.1, kAB, ~s, map(~s, 'p')^~x, ~y, 'p', b2
                       ) ▶₀ #i2 )
                  case R_2_send
                  by contradiction /* cyclic */
                qed
              qed
            next
              case case_2
              solve( Commit( a2, b2,
                             <'R', 'I', map(~s, 'p')^~x, map(~s, 'p')^~y, 
                              h(map(~s, 'p')^(~x*~y))>
                     ) @ #i2 )
                case R_3_receive
                solve( St_R_3( a2, ~id.1, kAB, ~s, map(~s, 'p')^~x, ~y, 'p', b2
                       ) ▶₀ #i2 )
                  case R_2_send
                  by contradiction /* cyclic */
                qed
              qed
            qed
          next
            case R_2_send_case_2
            by solve( !KU( ~y ) @ #vk.9 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.8 )
          qed
        next
          case R_4_send
          solve( !KU( mac(map(s.1, 'p')^~y.1, h(map(s.1, 'p')^(~y*~y.1)))
                 ) @ #vk.7 )
            case R_4_send
            by contradiction /* cyclic */
          next
            case c_mac
            solve( !KU( h(map(s.1, 'p')^(~y*~y.1)) ) @ #vk.11 )
              case c_h
              solve( !KU( map(s.1, 'p')^(~y*~y.1) ) @ #vk.12 )
                case I_1_send
                by solve( !KU( ~x.1 ) @ #vk.16 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.13 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y.1 ) @ #vk.13 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.2 ) @ #vk.17 )
              next
                case cexp
                by solve( !KU( ~y ) @ #vk.15 )
              qed
            qed
          qed
        next
          case c_mac
          solve( !KU( h(x^(~y*x.1)) ) @ #vk.6 )
            case c_h
            solve( !KU( x^(~y*x.1) ) @ #vk.7 )
              case I_1_send_case_1
              by solve( !KU( ~y ) @ #vk.8 )
            next
              case I_1_send_case_2
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case I_1_send_case_3
              by solve( !KU( ~x.2 ) @ #vk.11 )
            next
              case I_1_send_case_4
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case I_1_send_case_5
              by solve( !KU( ~x.3 ) @ #vk.12 )
            next
              case R_2_send_case_1
              by solve( !KU( ~y ) @ #vk.9 )
            next
              case R_2_send_case_2
              solve( !KU( map(~s, 'p')^x ) @ #vk.7 )
                case I_1_send_case_1
                by solve( !KU( ~x ) @ #vk.8 )
              next
                case I_1_send_case_2
                by solve( !KU( ~x ) @ #vk.10 )
              next
                case I_1_send_case_3
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_4
                by solve( !KU( ~x.1 ) @ #vk.11 )
              next
                case I_1_send_case_5
                by solve( !KU( ~x.2 ) @ #vk.13 )
              next
                case R_2_send_case_1
                by solve( !KU( ~y ) @ #vk.9 )
              next
                case R_2_send_case_2
                by solve( !KU( ~y ) @ #vk.14 )
              next
                case R_2_send_case_3
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_4
                by solve( !KU( ~y.1 ) @ #vk.12 )
              next
                case R_2_send_case_5
                by solve( !KU( ~y.1 ) @ #vk.14 )
              next
                case cexp
                solve( !KU( map(~s, 'p') ) @ #vk.9 )
                  case I_1_send
                  by solve( !KU( ~x.1 ) @ #vk.11 )
                next
                  case R_2_send
                  by solve( !KU( ~y.1 ) @ #vk.12 )
                next
                  case c_map
                  solve( !KU( ~s ) @ #vk.10 )
                    case I_1_send
                    solve( !KU( ~shk ) @ #vk.12 )
                      case Reveal
                      by contradiction /* from formulas */
                    qed
                  qed
                qed
              qed
            next
              case R_2_send_case_3
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case R_2_send_case_4
              by solve( !KU( ~y.1 ) @ #vk.12 )
            next
              case R_2_send_case_5
              by solve( !KU( ~y ) @ #vk.10 )
            next
              case R_2_send_case_6
              by solve( !KU( ~y.1 ) @ #vk.13 )
            next
              case cexp
              by solve( !KU( ~y ) @ #vk.10 )
            qed
          qed
        qed
      next
        case split_case_4
        solve( !KU( mac(x^inv((~y*x.1)), h(x^inv(x.1))) ) @ #vk.2 )
          case c_mac
          solve( !KU( x^inv((~y*x.1)) ) @ #vk.5 )
            case I_1_send_case_1
            by solve( !KU( ~x.2 ) @ #vk.9 )
          next
            case I_1_send_case_2
            by solve( !KU( ~x.2 ) @ #vk.10 )
          next
            case R_2_send_case_1
            by solve( !KU( ~y.1 ) @ #vk.10 )
          next
            case R_2_send_case_2
            by solve( !KU( ~y.1 ) @ #vk.11 )
          next
            case cexp
            by solve( !KU( ~y ) @ #vk.10 )
          qed
        qed
      next
        case split_case_5
        solve( !KU( x^(x.1*inv(~y)) ) @ #vk.5 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.7 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.9 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.2 ) @ #vk.9 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.2 ) @ #vk.10 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.11 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.13 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.10 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.10 )
        qed
      next
        case split_case_6
        solve( !KU( x^(x.1*inv((~y*x.2))) ) @ #vk.5 )
          case I_1_send_case_1
          by solve( !KU( ~y ) @ #vk.8 )
        next
          case I_1_send_case_2
          by solve( !KU( ~y ) @ #vk.10 )
        next
          case I_1_send_case_3
          by solve( !KU( ~x.3 ) @ #vk.9 )
        next
          case I_1_send_case_4
          by solve( !KU( ~x.3 ) @ #vk.10 )
        next
          case R_2_send_case_1
          by solve( !KU( ~y ) @ #vk.12 )
        next
          case R_2_send_case_2
          by solve( !KU( ~y.1 ) @ #vk.14 )
        next
          case R_2_send_case_3
          by solve( !KU( ~y.1 ) @ #vk.10 )
        next
          case R_2_send_case_4
          by solve( !KU( ~y.1 ) @ #vk.11 )
        next
          case cexp
          by solve( !KU( ~y ) @ #vk.11 )
        qed
      qed
    next
      case c_senc
      solve( !KU( h(~shk) ) @ #vk.7 )
        case c_h
        solve( !KU( ~shk ) @ #vk.8 )
          case Reveal
          by contradiction /* from formulas */
        qed
      qed
    qed
  qed
qed

restriction noselfkey:
  "∀ X Y #i. (NotEq( X, Y ) @ #i) ⇒ (¬(X = Y))"
  // safety formula

restriction differ:
  "∀ x y #i. (Differ( x, y ) @ #i) ⇒ (¬(x = y))"
  // safety formula

/* All well-formedness checks were successful. */

end