theory P1
begin

builtins: symmetric-encryption
functions: mac/2

/*
	We want to formalize the following protocol
	protocol {
		1. A -> B: {'1', x}
		2. B -> A: {'2', x}k(A,B)
	}
*/


rule Reveal:
  [ !SharedKey(A, B, kAB)]
--[ Rev(A) ]->
  [ Out(kAB) ]


rule SetupKey:
  [ Fr(~kAB) ]
--[ NotEq(A, B) ]->
  [ !SharedKey(A, B, ~kAB) ]

// Initialize A
rule Init_A:
  [ Fr(~id) , !SharedKey(A, B, kAB)]
--[ Create_A(A, ~id) ]->
  [ St_A_1(A, ~id, kAB, B) ]

// Initialize B
rule Init_B:
  [ Fr(~id), !SharedKey(A, B, kAB) ]
--[ Create_B(B, ~id) ]->
  [ St_B_1(B, ~id, kAB, A) ]

// 1. A send
rule A_1_send:
  [ St_A_1(A, ~id, kAB, B), Fr(~x) ]
--[ Send(A, <'1', ~x>) ]->
  [ St_A_2(A, ~id, kAB, ~x, B), Out(<'1', ~x>) ]

// 1. B receive
rule B_1_receive:
  [ St_B_1(B, ~id, kAB, A), In(<'1', x>) ]
--[ Recv($B, <'1', x>) ]->
  [ St_B_2(B, ~id, kAB, x, A) ]


// 2. B send
rule B_2_send:
  let macB2 = mac(kAB, <x, A, B>)
  in
  [ St_B_2(B, ~id, kAB, x, A) ]
--[ Send($B, <'2', macB2>) ]->
  [ St_B_3(B, ~id, kAB, x, A), Out(<'2', macB2>) ]

// 2. A receive
rule A_2_receive:
  let macA2 = mac(kAB, <x, A, B>)
  in
  [ St_A_2(A, ~id, kAB, x, B), In(<'2', macA2>) ]
--[ Recv($A, <'2', macA2>) ]->
  [ St_A_3(A, ~id, kAB, x, B) ]


/**
	Lemmas
**/

	
lemma secrecy:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma secrecy_PFS:
  "All A x #i. 
    Secret(A,x) @i ==> 
    not (Ex #j. K(x)@j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i & r < i)"

lemma noninjectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementINITIATOR:
  "All a b t #i. 
    Commit(a,b,<'I','R',t>) @i
    ==> (Ex #j. Running(b,a,<'I','R',t>) @j 
        & j < i
        & not (Ex a2 b2 #i2. Commit(a2,b2,<'I','R',t>) @i2
                           & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma noninjectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j)
        | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

lemma injectiveagreementRESPONDER:
  "All a b t #i. 
    Commit(a,b,<'R','I',t>) @i
    ==> (Ex #j. Running(b,a,<'R','I',t>) @j 
              & j < i
              & not (Ex a2 b2 #i2. Commit(a2,b2,<'R','I',t>) @i2
                                 & not (#i2 = #i)))
              | (Ex X #r. Reveal(X)@r & Honest(X) @i)"

end